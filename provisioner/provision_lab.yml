---
- name: Perform Checks to make sure this Playbook will complete successfully
  hosts: localhost
  connection: local
  become: false
  gather_facts: true
  tasks:
    - name: make sure we are running correct Ansible Version
      assert:
        that:
          - ansible_version.major >= 2
          - ansible_version.minor >= 8

    - name: make sure workshop_type is set to a correct value
      assert:
        that:
          - workshop_type is defined
          - workshop_type in valid_workshop_types
        msg: "workshop_type must be defined and be one of: {{valid_workshop_types}}"

    - name: make sure dns_type is set to a correct value
      assert:
        that:
          - dns_type is defined
          - dns_type in valid_dns_type
        msg: "workshop_type must be defined and be one of: {{valid_dns_type}}"

    - name: make sure network_type is set to a correct value
      assert:
        that:
          - network_type is defined
          - network_type in valid_network_types
        msg: "network_type must be defined and be one of: {{valid_network_types}}"
      when: workshop_type == "networking"

    - name: make sure DNS name is 65 characters or less
      vars:
        test_name: "studentXXX-code.{{ec2_name_prefix|lower}}.{{workshop_dns_zone}}"
      assert:
        that:
          - "{{test_name|length}} <= 65"
        msg: "you must make sure your DNS name is shorter"

    - name: make sure security_console is set to a correct value
      assert:
        that:
          - security_console is defined
          - security_console in valid_security_console_types
        msg: "network_type must be defined and be one of: {{valid_security_console_types}}"
      when: workshop_type == "security"

    - name: run role to check if local environment setup will work with AWS
      include_role:
        name: aws_check_setup

    - name: make sure we are not running with TESTWORKSHOP as the name so no overlap
      assert:
        that:
          - ec2_name_prefix != "TESTWORKSHOP"
        msg:
          - "ec2_name_prefix cannot be set to TESTWORKSHOP"
          - "please set a unique name for your workshop"


    - name: make sure we are not using `ansible` as the password
      assert:
        that:
          - admin_password != "ansible"
        msg:
          - "admin_password cannot be set to ansible"
          - "please set a unique password for your workshop"

    - name: make sure packages required are installed on this control node
      pip:
        name:
          - netaddr
      check_mode: true
      when: workshop_type == "networking"
      register: package_state

    # windows has a dependancy on sshpass which is nogo on macos: brew install it
    - name: make sure (windows) packages required are installed on this control node
      pip:
        name:
          - pywinrm
          - boto
          - requests
          - requests-credssp
          # - sshpass
      check_mode: true
      when: workshop_type == "windows"
      register: package_state


    - name: fail if previous check has changed
      assert:
        that:
          - package_state.changed != True

    - name: auto license feature for Ansible Tower
      block:
        - name: Check that the provided license exists
          stat:
            path: "{{playbook_dir}}/tower_license.json"
          register: stat_result
        - debug:
            var: stat_result
        - fail:
            msg: "autolicense is turned on, but we need a license located at {{playbook_dir}}/tower_license.json"
          when:
            - not stat_result.stat.exists
      when:
        - autolicense is defined
        - autolicense

    - name: Install required roles and collections onto THIS machine
      when:
        - workshop_type == "security"
      block:
        - name: required roles
          shell: "ansible-galaxy install {{item}} -f --force-with-deps -p ./roles/"
          async: 600
          poll: 0
          loop:
            - 'geerlingguy.repo-epel'
            - 'ansible_security.ids_config'
            - 'ansible_security.ids_install'
          register: required_role_loop_out

        - name: check async role install
          async_status:
            jid: "{{ item['ansible_job_id'] }}"
          loop: "{{ required_role_loop_out['results'] }}"
          register: job_result
          until: job_result.finished
          retries: 30

    - name: Windows workshop specific vars
      include_vars:
        file: "group_vars/{{ workshop_type }}.yml"
      when: workshop_type == "windows"

    - name: Check Domain Admin Password Complexity
      assert:
        that:
          - domain_admin_password | length > 7
          - domain_admin_password | regex_search('[A-Z]')
          - domain_admin_password | regex_search('[a-z]')
          - domain_admin_password | regex_search('[0-9]')
        fail_msg: "domain_admin_password does not need password complexity requirements (8+ Chars, Lower Case, Upper Case, Number)"
      when: workshop_type == "windows"

    - name: Check Users Password Complexity
      assert:
        that:
          - users_password | length > 7
          - users_password | regex_search('[A-Z]')
          - users_password | regex_search('[a-z]')
          - users_password | regex_search('[0-9]')
        fail_msg: "users_password does not need password complexity requirements (8+ Chars, Lower Case, Upper Case, Number)"
      when: workshop_type == "windows"


- name: Create lab instances in AWS
  hosts: localhost
  connection: local
  become: false
  gather_facts: false
  roles:
    - manage_ec2_instances

- name: wait for all nodes to have SSH reachability
  hosts: "managed_nodes:control_nodes"
  become: true
  gather_facts: false
  roles:
    - connectivity_test

- name: wait for all security nodes to have SSH reachability
  hosts: "security_connection_check"
  become: true
  gather_facts: false
  roles:
    - connectivity_test

- name: Configure common options on managed nodes and control nodes
  hosts: "managed_nodes:control_nodes"
  gather_facts: false
  become: true
  roles:
    - user_accounts
    - common
  tags: control_node

- name: CONFIGURE CONTROL NODE
  hosts: control_nodes
  gather_facts: true
  become: true
  roles:
    - role: control_node
    - role: code_server
      when:
        - code_server is defined
        - code_server
  tags: control_node

- name: add dns entires for all student control nodes
  hosts: control_nodes
  become: true
  gather_facts: false
  roles:
    - role: aws_dns
      when:
        - dns_type is defined
        - dns_type == "aws"
  tags: control_node


- name: Setup Amazon S3 Website for Student Login
  hosts: localhost
  connection: local
  become: false
  gather_facts: false
  roles:
    - role: aws_workshop_login_page
      when:
        - create_login_page is defined
        - create_login_page
  tags: control_node

- name: include workshop_type unique setup roles
  import_playbook: "{{workshop_type}}.yml"

- name: Alert the mothership
  hosts: localhost
  connection: local
  become: false
  gather_facts: false
  tasks:
    - {include_role: {name: tower_request}, when: student_total > 9}

- name: print out information for instructor
  hosts: localhost
  connection: local
  become: false
  gather_facts: false
  tasks:
    - name: set facts for output
      set_fact:
        summary_information: |
          PROVISIONER SUMMARY
          *******************
          - Workshop name is {{ec2_name_prefix}}
          - Instructor inventory is located at  {{playbook_dir}}/{{ec2_name_prefix}}/instructor_inventory.txt
          - Private key is located at {{playbook_dir}}/{{ec2_name_prefix}}/{{ec2_name_prefix}}-private.pem
          {{website_information}}
          FAILURES
          *******************
          {{dns_information}}
          {{callback_information}}
          {{coder_information}}

    - name: Print Summary Information
      debug:
        msg: "{{summary_information}}"
