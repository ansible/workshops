- name: Perform Checks to make sure this Playbook will complete successfully
  hosts: localhost
  connection: local
  become: no
  gather_facts: no
  tasks:
    - name: make sure we are running correct Ansible Version
      assert:
        that:
          - ansible_version.minor >= 6
          - ansible_version.major >= 2

    - name: grab boto version
      command: python -c 'import boto3; print(boto3.__version__)'
      register: py_cmd

    - name: make sure we are running correct boto version
      assert:
        that:
        - py_cmd.stdout.startswith('1.7')

    - name: make sure we are not running with TESTWORKSHOP as the name so no overlap
      assert:
        that:
          - ec2_name_prefix != "TESTWORKSHOP"

    - name: auto license feature for Ansible Tower
      block:
        - name: Check that the provided license exists
          stat:
            path: "{{playbook_dir}}/tower_license.json"
          register: stat_result
        - debug:
            var: stat_result
        - fail:
            msg: "autolicense is turned on, but we need a license located at {{playbook_dir}}/tower_license.json"
          when:
           - not stat_result.stat.exists
      when:
       - autolicense is defined
       - autolicense

    - name: check for underscores
      fail:
        msg: "Amazon AWS does not allow underscores _ for s3 websites, please see https://docs.aws.amazon.com/AmazonS3/latest/dev/BucketRestrictions.html"
      when:
        - create_login_page is defined
        - create_login_page
        - "'_' in ec2_name_prefix"

    - name: grab information about AWS user
      aws_caller_facts:
        region: "{{ ec2_region }}"
      register: whoami

    - name: save username of AWS user
      set_fact:
         linklight_user: '{{ whoami.arn.split("/")[-1] }}'

    - debug: msg='{{ whoami.arn.split("/")[-1] }}'

- name: Create lab instances in AWS
  hosts: localhost
  connection: local
  become: no
  gather_facts: no
  vars:
    teardown: false
  roles:
    - manage_ec2_instances

- name: wait for all nodes to have SSH reachability
  hosts: "managed_nodes:control_nodes"
  become: yes
  gather_facts: no
  roles:
    - connectivity_test

- name: Configure common options on managed nodes and control nodes
  hosts: "managed_nodes:control_nodes"
  become: yes
  roles:
    - user_accounts
    - common

- name: Configure control node
  hosts: control_nodes
  become: yes
  roles:
    - control_node

- name: Setup Amazon S3 Website for Student Login
  hosts: localhost
  connection: local
  become: no
  gather_facts: no
  roles:
    - { role: aws_workshop_login_page, when: create_login_page is defined and create_login_page }

- name: Setup Host routes for ansible control node and host1 when in networking mode
  hosts: "managed_nodes:control_nodes"
  become: no
  gather_facts: no
  roles:
    - { role: network_hostroutes, when: networking is defined and networking }
