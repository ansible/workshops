- name: Perform Checks to make sure this Playbook will complete successfully
  hosts: localhost
  connection: local
  become: no
  gather_facts: no
  tasks:
      # Please read this, if you try to delete this task
      # https://github.com/network-automation/linklight/issues/21
    - name: make sure we are running correct Ansible Version
      assert:
        that:
          - ansible_version.major >= 2
          - ansible_version.minor >= 6

      # F5workshop and networking workshop are two different workshops
    - name: make sure f5workshop is not turned on when networking is
      assert:
        msg: "f5workshop and networking are mutually exclusive. Choose only one."
        that:
          - not f5workshop
      when: networking

      # F5workshop and networking workshop are two different workshops
    - name: make sure networking is not turned on when f5workshop is
      assert:
        msg: "networking and f5workshop are mutually exclusive. Choose only one."
        that:
          - not networking
      when: f5workshop

    - name: run role to check if local environment setup will work with AWS
      include_role:
        name: aws_check_setup

    - name: make sure we are not running with TESTWORKSHOP as the name so no overlap
      assert:
        that:
          - ec2_name_prefix != "TESTWORKSHOP"

    - name: if special lab is defined, make sure its a supported mode
      assert:
        that: special is match("all_cisco") or special is match("multivendor")
      when:
        - special is defined

    - name: auto license feature for Ansible Tower
      block:
        - name: Check that the provided license exists
          stat:
            path: "{{playbook_dir}}/tower_license.json"
          register: stat_result
        - debug:
            var: stat_result
        - fail:
            msg: "autolicense is turned on, but we need a license located at {{playbook_dir}}/tower_license.json"
          when:
           - not stat_result.stat.exists
      when:
       - autolicense is defined
       - autolicense

- name: Create lab instances in AWS
  hosts: localhost
  connection: local
  become: no
  gather_facts: no
  vars:
    teardown: false
  roles:
    - manage_ec2_instances

- name: wait for all nodes to have SSH reachability
  hosts: "managed_nodes:control_nodes"
  become: yes
  gather_facts: no
  roles:
    - connectivity_test

- name: Configure common options on managed nodes and control nodes
  hosts: "managed_nodes:control_nodes"
  become: yes
  roles:
    - user_accounts
    - common

- name: CONFIGURE F5 WORKSHOP WEBSERVERS host1 and host2
  hosts: lab_hosts
  become: yes
  gather_facts: no
  roles:
    - { role: webservers, when: f5workshop }

- name: CONFIGURE CONTROL NODE
  hosts: control_nodes
  become: yes
  roles:
    - control_node
  tags: control_node

- name: Setup Amazon S3 Website for Student Login
  hosts: localhost
  connection: local
  become: no
  gather_facts: no
  roles:
    - { role: aws_workshop_login_page, when: create_login_page is defined and create_login_page }

- name: Setup Host routes for ansible control node and host1 when in networking mode
  hosts: "managed_nodes:control_nodes"
  become: no
  gather_facts: no
  roles:
    - { role: network_hostroutes, when: networking }

- name: setup f5 nodes
  hosts: f5
  connection: local
  gather_facts: no
  roles:
    - { role: f5_setup, when: f5workshop }

- name: GATHER AWS FACTS FOR ROUTERS
  hosts: access,core
  connection: local
  gather_facts: no
  roles:
    - { role: gather_router_facts }

- name: CONFIGURE ACCESS ROUTERS
  hosts: access
  connection: local
  gather_facts: no

  roles:
    - role: configure_routers
      vars:
        type: csr_access
        router3_tunnel: 100
        router4_tunnel: 101

- name: CONFIGURE CORE ROUTERS
  hosts: core
  connection: local
  gather_facts: no

  roles:
    - role: configure_routers
      vars:
        type: csr_core
        router1_tunnel: 100
        router2_tunnel: 101
        dci_tunnel: 200

- name: CONFIGURE CORE ROUTERS
  hosts: dmvpn
  connection: local
  gather_facts: no

  roles:
    - role: configure_routers
      vars:
        type: csr_hub

- name: Alert the mothership
  hosts: localhost
  connection: local
  become: no
  gather_facts: no
  roles:
    - { role: tower_request, when: student_total > 9 }
