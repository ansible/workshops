---
- name: Initial check setup
  hosts: localhost
  connection: local
  become: false
  gather_facts: true

  tasks:
    - name: Workshop collection final check
      block:
        - name: Run pre-check role to make sure workshop will complete provisioning
          ansible.builtin.include_role:
            name: ../roles/workshop_check_setup

        - name: Run AWS check setup if using AWS
          ansible.builtin.include_role:
            name: ../roles/aws_check_setup

        - name: Download AAP bundle installer
          ansible.builtin.include_role:
            name: ../roles/aap_download
          when: not pre_build|bool

      rescue:
        - name: Error with setup
          ansible.builtin.fail:
            msg: The provisioner has failed during initial check_setup, please scroll up to see exact error.  Open an issue on https://github.com/ansible/workshops/issues

- name: Create lab instances in AWS
  hosts: localhost
  connection: local
  become: false
  gather_facts: false
  tasks:
    - name: Cluster nodes
      ansible.builtin.set_fact:
        control_nodes: 4
      when: create_cluster is defined and create_cluster|bool
    - ansible.builtin.include_role:
        name: ../roles/manage_ec2_instances

- name: Wait for all nodes to have SSH reachability
  hosts: "managed_nodes:control_nodes:attendance"
  become: true
  gather_facts: false

  tasks:
    - ansible.builtin.include_role:
        name: ../roles/connectivity_test

- name: Configure host names on managed nodes
  hosts: "managed_nodes"
  become: true
  gather_facts: false
  tasks:
    - name: Set hostname
      ansible.builtin.hostname:
        name: "{{ short_name|default('node') }}.example.com"

    - name: Setup /etc/hosts file per student
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/{{ ec2_name_prefix }}/{{ student }}-etchosts.txt"
        dest: "/etc/hosts"

- name: Configure nginx on attendance host
  hosts: attendance
  become: true
  gather_facts: true
  tasks:
    - name: Include workshop_attendance role
      ansible.builtin.include_role:
        name: ../roles/workshop_attendance
      when: attendance|bool

- name: Wait for all security nodes to have SSH reachability
  hosts: "security_connection_check"
  become: true
  gather_facts: false
  tasks:
    - name: Include connectivity_test role
      ansible.builtin.include_role:
        name: ../roles/connectivity_test

- name: Configure common options and control nodes
  hosts: "control_nodes"
  gather_facts: true
  become: true
  tasks:
    - name: Include user_accounts role
      ansible.builtin.include_role:
        name: ../roles/user_accounts

    - name: Include common role
      ansible.builtin.include_role:
        name: ../roles/common

    - name: Setup /etc/hosts file per student
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/{{ ec2_name_prefix }}/{{ student }}-etchosts.txt"
        dest: "/etc/hosts"

    - name: Include control_node role
      ansible.builtin.include_role:
        name: ../roles/control_node
      when: not pre_build|bool

    - name: Include control_node_always role
      ansible.builtin.include_role:
        name: ../roles/control_node_always

    - name: Add dns entries for all student control nodes using aws_dns role
      ansible.builtin.include_role:
        name: ../roles/aws_dns
      when:
        - dns_type is defined
        - dns_type == "aws"
        - controllerinstall is defined
        - controllerinstall

    - name: Install and configure code server using code_server role
      ansible.builtin.include_role:
        name: ../roles/code_server_native
      when:
        - code_server is defined
        - code_server
        - controllerinstall is defined
        - controllerinstall

    - name: Include populate_controller role
      ansible.builtin.include_role:
        name: ../roles/populate_controller
      when:
        - controllerinstall is defined
        - controllerinstall|bool
        - populatecontroller

- name: Configure private automation hub
  hosts: 'automation_hub'
  gather_facts: true
  become: true
  tasks:
    - name: Include private_automation_hub role
      include_role:
          name: ../roles/private_automation_hub
      when:
        - automation_hub is defined
        - automation_hub|bool

    - name: Change hub password
      ansible.builtin.shell: 'PULP_SETTINGS=/etc/pulp/settings.py pulpcore-manager reset-admin-password --password """{{ admin_password }}"""'
      when:
        - pre_build is defined
        - pre_build|bool

- name: Include workshop_type unique setup roles
  ansible.builtin.import_playbook: "{{ playbook_dir }}/workshop_specific/{{ workshop_type }}.yml"

- name: Print out information for instructor
  hosts: localhost
  connection: local
  gather_facts: false
  tasks:
    - name: Set facts for output
      ansible.builtin.set_fact:
        summary_information: |
          PROVISIONER SUMMARY
          ===================

          - Workshop name is {{ ec2_name_prefix }}
          {% if not rhpds_info_output | default(false) | bool %}
          - Instructor inventory is located at  {{ playbook_dir }}/{{ ec2_name_prefix }}/instructor_inventory.txt
          - Private key is located at {{ playbook_dir }}/{{ ec2_name_prefix }}/{{ ec2_name_prefix }}-private.pem
          {% endif %}
          {% if attendance %}
          - {{ hostvars['attendance-host'].login_website_information | default("attendance feature is not functioning") }}
          {% if rhpds_info_output | default(false) | bool %}
          - Admin password: {{ admin_password }}
          {% endif %}
          {% endif %}

          {% if not rhpds_info_output | default(false) | bool %}
          FAILURES
          ===================
          {{ dns_information }}
          {{ callback_information }}
          {% endif %}

    - name: Print Summary Information
      when: not rhpds_info_output | default(false) | bool
      ansible.builtin.debug:
        msg: "{{ summary_information }}"

    - name: Print Summary Information
      when: rhpds_info_output | default(false) | bool
      ansible.builtin.debug:
        msg: "user.info: {{ summary_information }}"

    - name: Attempt RHPDS completion callback
      when:
      - agnosticd_callback_url != ''
      - agnosticd_callback_token != ''
      vars:
        user_body_yaml: "{{ output_dir ~ '/user-body.yaml' }}"
        user_data_yaml: "{{ output_dir ~ '/user-data.yaml' }}"
        user_info_yaml: "{{ output_dir ~ '/user-info.yaml' }}"
      ansible.builtin.uri:
        url: "{{ agnosticd_callback_url }}"
        method: POST
        body_format: json
        body:
          event: complete
          message_body: >-
            {%- if user_body_yaml is file -%}
            {{ lookup('file', user_body_yaml) | from_yaml | default([], true) }}
            {%- else -%}
            []
            {%- endif -%}
          messages: >-
            {%- if user_info_yaml is file -%}
            {{ lookup('file', user_info_yaml) | from_yaml | default([], true) }}
            {%- elif summary_information is defined -%}
            {{ [ summary_information ] }}
            {%- else -%}
            []
            {%- endif -%}
          data: >-
            {%- if user_data_yaml is file -%}
            {{ lookup('file', user_data_yaml) | from_yaml | default({}, true) }}
            {%- else -%}
            {}
            {%- endif -%}
        headers:
          Authorization: Bearer {{ agnosticd_callback_token }}
      # Best effort
      ignore_errors: true
