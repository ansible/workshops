- name: Perform Checks to make sure this Playbook will complete successfully
  hosts: localhost
  connection: local
  become: no
  gather_facts: yes
  tasks:
    - name: make sure we are running correct Ansible Version
      assert:
        that:
          - ansible_version.major >= 2
          - ansible_version.minor >= 8

    - name: make sure workshop_type is set to a correct value
      assert:
        that:
          - workshop_type is defined
          - workshop_type in valid_workshop_types
        msg: "workshop_type must be defined and be one of: {{valid_workshop_types}}"

    - name: make sure network_type is set to a correct value
      assert:
        that:
          - network_type is defined
          - network_type in valid_network_types
        msg: "network_type must be defined and be one of: {{valid_network_types}}"
      when: workshop_type == "networking"

    - name: run role to check if local environment setup will work with AWS
      include_role:
        name: aws_check_setup

    - name: make sure we are not running with TESTWORKSHOP as the name so no overlap
      assert:
        that:
          - ec2_name_prefix != "TESTWORKSHOP"

    - name: make sure packages required are installed on this control node
      pip:
        name:
          - netaddr
      check_mode: yes
      when: workshop_type == "networking"
      register: package_state

    - name: fail if previous check has changed
      assert:
        that:
          - package_state.changed != True

    - name: auto license feature for Ansible Tower
      block:
        - name: Check that the provided license exists
          stat:
            path: "{{playbook_dir}}/tower_license.json"
          register: stat_result
        - debug:
            var: stat_result
        - fail:
            msg: "autolicense is turned on, but we need a license located at {{playbook_dir}}/tower_license.json"
          when:
           - not stat_result.stat.exists
      when:
       - autolicense is defined
       - autolicense

    - name: Install required roles onto THIS machine
      shell: "ansible-galaxy install {{item}} -f --force-with-deps -p ./roles/"
      loop:
        - 'geerlingguy.repo-epel'
        - 'ansible_security.ids_config'
        - 'ansible_security.ids_install'
      when:
        - workshop_type == "security"

- name: Create lab instances in AWS
  hosts: localhost
  connection: local
  become: no
  gather_facts: no
  roles:
    - manage_ec2_instances

- name: wait for all nodes to have SSH reachability
  hosts: "managed_nodes:control_nodes"
  become: yes
  gather_facts: no
  roles:
    - connectivity_test

- name: Configure common options on managed nodes and control nodes
  hosts: "managed_nodes:control_nodes"
  gather_facts: no
  become: yes
  roles:
    - user_accounts
    - common
  tags: control_node

- name: CONFIGURE F5 WORKSHOP WEBSERVERS host1 and host2
  hosts: lab_hosts
  become: yes
  gather_facts: no
  roles:
    - { role: webservers, when: workshop_type == "f5" }

- name: CONFIGURE CONTROL NODE
  hosts: control_nodes
  gather_facts: no
  become: yes
  roles:
    - control_node
  tags: control_node

- name: ADD DNS ENTRIES FOR ALL STUDENT TOWER NODES
  hosts: control_nodes
  become: yes
  gather_facts: no
  roles:
    - { role: aws_dns, when: create_login_page is defined and create_login_page }
  tags: control_node

- name: Setup Amazon S3 Website for Student Login
  hosts: localhost
  connection: local
  become: no
  gather_facts: no
  roles:
    - { role: aws_workshop_login_page, when: create_login_page is defined and create_login_page }
  tags: control_node

# - name: Setup Host routes for ansible control node and host1 when in networking mode
#   hosts: "managed_nodes:control_nodes"
#   become: no
#   gather_facts: no
#   roles:
#     - { role: network_hostroutes, when: workshop_type == "networking" }

- name: setup f5 nodes
  hosts: f5
  become: no
  connection: local
  gather_facts: no
  roles:
    - { role: f5_setup, when: workshop_type == "f5" }

- name: WAIT FOR ROUTERS TO HAVE SSH REACHABILITY
  hosts: "routers"
  gather_facts: no
  tasks:
    - name: MAKE SURE ROUTERS HAVE SSH REACHABILITY
      include_role:
        name: connectivity_test
        tasks_from: routers
      when: workshop_type == "networking"

- name: GATHER AWS FACTS FOR ROUTERS
  hosts: access,core
  connection: local
  gather_facts: no
  roles:
    - { role: gather_router_facts }

- name: CONFIGURE ACCESS ROUTERS
  hosts: access
  connection: local
  gather_facts: no

  roles:
    - role: configure_routers
      vars:
        type: access
        router3_tunnel: 100
        router4_tunnel: 101
      when:
        - workshop_type == "networking"
        - ansible_network_os == "ios"

- name: CONFIGURE CORE ROUTERS
  hosts: core
  connection: local
  gather_facts: no

  roles:
    - role: configure_routers
      vars:
        type: core
      when:
        - workshop_type == "networking"
        - ansible_network_os == "ios" or ansible_network_os == "eos"

- name: INSTALL AND CONFIGURE SPLUNK ENTERPRISE
  hosts: splunk
  become: true
  gather_facts: no
  roles:
    - role: splunk_enterprise
      when:
        - workshop_type == "security"

- name: INSTALL AND CONFIGURE SNORT
  hosts: snort
  become: true
  vars:
    ids_config_snort_version: '2.9.13'
    ids_install_provider: "snort"
    ids_install_normalize_logs: True
    ids_install_snort_user: root
    ids_install_snort_group: root
  tasks:
    - block:
      - name: setup epel for snort ecosystem rule lifecycling
        include_role:
          name: "geerlingguy.repo-epel"
      - name: import ids_install role
        include_role:
          name: "ansible_security.ids_install"
      - name: import ids_config role
        include_role:
          name: "ansible_security.ids_config"
      when:
        - workshop_type == "security"

- name: CHANGE JUNIPER PASSWORD
  hosts: routers
  gather_facts: no
  vars:
    ansible_connection: network_cli
  tasks:
    - name: Run tasks/other.yaml instead of 'main'
      include_role:
        name: configure_routers
        tasks_from: juniper_default
      when: ansible_network_os == "junos"

- name: Alert the mothership
  hosts: localhost
  connection: local
  become: no
  gather_facts: no
  tasks:
    - { include_role: {name: tower_request}, when: student_total > 9 }

  post_tasks:
    - name: set facts for output
      set_fact:
        summary_information: |
          PROVISIONER SUMMARY
          *******************
          - Workshop name is {{ec2_name_prefix}}
          - Instructor inventory is located at  {{playbook_dir}}/{{ec2_name_prefix}}/instructor_inventory.txt
          - Private key is located at {{playbook_dir}}/{{ec2_name_prefix}}/{{ec2_name_prefix}}-private.pem
          {{website_information}}
          FAILURES
          *******************
          {{dns_information}}

    - name: Print Summary Information
      debug:
        msg: "{{summary_information}}"

- name: POPULATE TOWER STEP ONE
  hosts: control_nodes
  gather_facts: no

  tasks:
#INITAL SETUP
    - name: RUN POPULATE TOWER STEP ONE
      include_role:
        name: populate_tower
        tasks_from: populate_tower_step_one
      when:
        - workshop_type == "networking"
        - towerinstall is defined
        - towerinstall|bool


- name: POPULATE TOWER STEP TWO (FOR REMOTE EXECUTION)
  hosts: control_nodes
  become: yes
  gather_facts: no

  tasks:
#CREDENTIAL AND INVENTORY
    - name: RUN POPULATE TOWER STEP TWO
      include_role:
        name: populate_tower
        tasks_from: populate_tower_step_two
      when:
        - workshop_type == "networking"
        - towerinstall is defined
        - towerinstall|bool

- name: TOWER JOB TEMPLATES IN PLAYBOOK FORM
  hosts: control_nodes
  gather_facts: no

  tasks:
#PERMISSIONS
    - name: RUN POPULATE TOWER STEP THREE
      include_role:
        name: populate_tower
        tasks_from: populate_tower_step_three
      when:
        - workshop_type == "networking"
        - towerinstall is defined
        - towerinstall|bool
