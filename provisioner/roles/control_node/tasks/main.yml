---
- hostname:
    name: "{{short_name}}"

## This is needed for sshpass
- name: Install EPEL
  yum:
    name: "https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm"
    state: present

- name: Install base packages
  yum:
    name:
      - vim
      - git
      - wget
      - nano
      - tree
      - sshpass
      - tmux
      - python-pip
      - ansible
      - gcc
    state: present
  register: yum_check
  until: yum_check is not failed
  retries: 4
  delay: 5

- name: Install ansible.cfg in home directory
  template:
    src: ansible.cfg.j2
    dest: "/home/{{ username }}/.ansible.cfg"
    owner: "{{ username }}"
    group: "{{ username }}"

- name: Install ansible.cfg in root home directory
  template:
    src: ansible.cfg.j2
    dest: "/root/.ansible.cfg"
    owner: root
    group: root

- name: Install vimrc in home directory
  template:
    src: vimrc.j2
    dest: "/home/{{ username }}/.vimrc"
    owner: "{{ username }}"
    group: "{{ username }}"

- name: setup /etc/hosts file per student
  copy:
    src: "{{ playbook_dir }}/{{ec2_name_prefix}}/{{ username }}-etchosts.txt"
    dest: "/etc/hosts"
    owner: "{{ username }}"
    group: "{{ username }}"

- name: make sure .ssh is created
  file:
    path: "/home/{{username}}/.ssh/"
    owner: "{{ username }}"
    group: "{{ username }}"
    state: directory

- name: copy over ssh config file
  template:
    src: sshconfig.j2
    dest: /home/{{item}}/.ssh/config
    owner: "{{item}}"
    group: "{{item}}"
    mode: 0700
  loop:
    - "{{ansible_user}}"
    - "{{username}}"

- name: Put ssh-key in proper spot for student
  copy:
    src: "{{ playbook_dir }}/{{ec2_name_prefix}}/{{ec2_name_prefix}}-private.pem"
    dest: "/home/{{item}}/.ssh/aws-private.pem"
    owner: "{{ item }}"
    group: "{{ item }}"
    mode: 0400
  loop:
    - "{{ansible_user}}"
    - "{{username}}"

# FIXME: This should probably be refactored to use things like the following
# instead of hard coding
#
#   command: cp -r /tmp/linklight/exercises/{{workshop_type}}/ /home/{{ username }}/{{workshop_type}}-workshop/
#
# That would enable a more generic role/scaffolding
- name: clean out /tmp/linklight
  file:
    path: /tmp/linklight
    state: absent

- name: Clone workshops repo (NETWORKING MODE)
  git:
    accept_hostkey: true
    clone: true
    dest: /tmp/workshops
    repo: '{{ ansible_workshops_url | default("https://github.com/ansible/workshops.git") }}'
    version: '{{ ansible_workshops_version | default("master") }}'
    refspec: '{{ ansible_workshops_refspec | default("") }}'
    force: true
  when:
    - workshop_type != "networking"

- name: Move relevant exercises to correct location
  copy:
    src: "/tmp/workshops/exercises/ansible_{{workshop_type}}/"
    dest: "/home/{{ username }}/{{workshop_type}}-workshop"
    remote_src: true
    owner: "{{ username }}"
    group: "{{ username }}"
  when:
    - workshop_type != "f5"
    - workshop_type != "networking"
    - workshop_type != "advanced_tower"
## need to fix the conditionals above https://github.com/ansible/workshops/issues/743

- name: setup control node for workshop type
  include_tasks: "{{workshop_type}}.yml"

- name: check to see if ansible tower is already up and running
  uri:
    url: https://{{ ansible_host }}/api/v2/ping/
    method: GET
    user: admin
    password: "{{admin_password}}"
    validate_certs: false
    force_basic_auth: true
  register: check_tower
  ignore_errors: true
  failed_when: false
  when:
    - towerinstall is defined
    - towerinstall|bool

- name: install tower if knob is set
  include_tasks: "tower.yml"
  when:
    - towerinstall is defined
    - towerinstall|bool
    - check_tower.status != 200

- name: Ensure eula is accepted if posting license
  command: python -c "import json; license = json.loads(open('{{playbook_dir}}/tower_license.json', 'r').read()); ceula = license.get('eula_accepted'); license['eula_accepted'] = True if not ceula else ceula ; open('{{playbook_dir}}/tower_license.json', 'w').write(json.dumps(license));"
  delegate_to: localhost
  run_once: true
  become: false
  when:
    - autolicense is defined
    - autolicense|bool
    - towerinstall is defined
    - towerinstall|bool

- name: Post license key
  uri:
    url: https://{{ansible_host}}/api/v2/config/
    method: POST
    user: admin
    password: "{{admin_password}}"
    body: "{{ lookup('file',playbook_dir+'/tower_license.json') }}"
    body_format: json
    validate_certs: false
    force_basic_auth: true
  when:
    - autolicense is defined
    - autolicense|bool
    - towerinstall is defined
    - towerinstall|bool

- name: INSTALL VSCODE AND XRDP
  include_tasks: gui.yml
  when: xrdp|bool
