## This is needed for sshpass
- name: Install EPEL
  yum:
    name: "https://dl.fedoraproject.org/pub/epel/epel-release-latest-{{ ansible_distribution_major_version }}.noarch.rpm"
    state: present
  tags:
    - control_node
    - control

- name: Install base packages
  yum:
    name:
      - vim
      - git
      - wget
      - nano
      - tree
      - sshpass
    state: latest
  tags:
    - control_node
    - control

- name: Download Ansible
  get_url:
    url: http://releases.ansible.com/ansible/rpm/release/epel-7-x86_64/ansible-2.5.0-1.el7.ans.noarch.rpm
    dest: /tmp/ansible.rpm

- name: Install Ansible
  yum:
    name: /tmp/ansible.rpm
    state: present
  tags:
    - control_node
    - control

- name: Ansible Essentials mode
  block:
    - name: Clone lightbulb
      git:
        accept_hostkey: yes
        clone: yes
        dest: ~{{ username }}/lightbulb
        repo: https://github.com/ansible/lightbulb.git
        force: yes
      become_user: "{{ username }}"
      tags:
        - control_node
        - control

    - name: Remove things that students don't need
      file:
        state: absent
        path: ~{{ username }}/lightbulb/{{ item }}
      with_items:
        - aws_lab_setup
        - resources
        - Vagrantfile
        - README.md
      tags:
        - control_node
        - control

    - name: Create lab inventory directory
      file:
        state: directory
        path: /home/{{ username }}/lightbulb/lessons/lab_inventory
      tags:
        - control_node
        - control

    - name: Put student inventory in proper spot
      copy:
        src: ./{{ username }}-instances.txt
        dest: "{{ control_node_inventory_path }}"
        owner: "{{ username }}"
        group: "{{ username }}"
      when: username in inventory_hostname
      tags:
        - control_node
        - control
  when: networking is undefined or not networking

- name: Ansible NETWORKING MODE
  block:
    - name: Clear out lightbulb directory spot (NETWORKING MODE)
      file:
        state: absent
        path: /tmp/lightbulb

    - name: Clone lightbulb repo (NETWORKING MODE)
      git:
        accept_hostkey: yes
        clone: yes
        dest: /tmp/lightbulb
        repo: https://github.com/network-automation/lightbulb.git
        force: yes
      tags:
        - lightbulb

    - name: Move networking workshop folder to correct location  (NETWORKING MODE)
      command: cp -r /tmp/lightbulb/workshops/networking/ /home/{{ username }}/networking-workshop
      tags:
        - lightbulb

    - name: fix permissions of networking-workshop  (NETWORKING MODE)
      file:
        path: /home/{{ username }}/networking-workshop
        owner: "{{ username }}"
        group: "{{ username }}"
        recurse: yes

    - name: Create lab inventory directory (NETWORKING MODE)
      file:
        state: directory
        path: /home/{{ username }}/networking-workshop/lab_inventory
        owner: "{{ username }}"
        group: "{{ username }}"
      tags:
        - control_node
        - control

    - name: Put student inventory in proper spot (NETWORKING MODE)
      copy:
        src: ./{{ username }}-instances.txt
        dest: "/home/{{ username }}/networking-workshop/lab_inventory/hosts"
        owner: "{{ username }}"
        group: "{{ username }}"
      when: username in inventory_hostname
      tags:
        - control_node
        - control

    - name: Put ssh-key in proper spot for student
      copy:
        src: ./aws-private.pem
        dest: "/home/{{username}}/.ssh/"
        owner: "{{ username }}"
        group: "{{ username }}"
      tags:
        - testing

    - name: Put ssh-key in proper for {{ansible_user}}
      copy:
        src: ./aws-private.pem
        dest: "/home/{{ansible_user}}/.ssh/"
        owner: "{{ansible_user}}"
        group: "{{ansible_user}}"

    - name: change permissions on ssh-key file
      file:
        path: "/home/{{username}}/.ssh/aws-private.pem"
        mode: 0400

    - name: change permissions on ssh-key file
      file:
        path: "/home/{{ansible_user}}/.ssh/aws-private.pem"
        mode: 0400

    - name: copy over ssh config file for student
      template:
        src: sshconfig.j2
        dest: /home/{{username}}/.ssh/config
        owner: "{{username}}"
        group: "{{username}}"

    - name: copy over ssh config file for {{ansible_user}}
      template:
        src: sshconfig_ec2.j2
        dest: /home/{{ansible_user}}/.ssh/config
        owner: "{{ansible_user}}"
        group: "{{ansible_user}}"

    - name: change permissions on ssh config file for {{ansible_user}}
      file:
        path: "/home/{{ansible_user}}/.ssh/config"
        mode: 0700

    - name: change permissions on ssh config file for student
      file:
        path: "/home/{{username}}/.ssh/config"
        mode: 0700

    - name: setup /etc/hosts file per student
      copy:
        src: ./{{ username }}-etchosts.txt
        dest: "/etc/hosts"
        owner: "{{ username }}"
        group: "{{ username }}"
  when: networking is defined

- name: Install ansible.cfg and vimrc in home directory
  template:
    src: "{{ item }}"
    dest: ~{{ username }}/.{{ (item | splitext)[0] }}
    owner: "{{ username }}"
    group: "{{ username }}"
  with_items:
    - ansible.cfg.j2
    - vimrc.j2
  tags:
    - control_node
    - control
    - vim

- name: check to see if ansible tower is already up and running
  uri:
    url: https://localhost/api/v2/ping/
    method: GET
    user: admin
    password: "{{admin_password}}"
    validate_certs: False
  register: check_tower
  ignore_errors: yes
  when:
    - ansible_os_family == 'RedHat'
    - towerinstall is defined
    - towerinstall

- name: install tower if knob is set
  include_tasks: "tower.yml"
  when:
    - ansible_os_family == 'RedHat'
    - towerinstall is defined
    - towerinstall
    - check_tower is failed
