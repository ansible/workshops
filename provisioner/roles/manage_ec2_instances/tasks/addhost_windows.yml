---
################### Get workshop nodes info ###################

- name: grab facts for DomainController
  ec2_instance_facts:
    region: "{{ ec2_region }}"
    filters:
      instance-state-name: running
      "tag:Workshop_windc": "{{ec2_name_prefix}}-windc"
  register: windc_node_facts

- name: grab facts for Gitlab
  ec2_instance_facts:
    region: "{{ ec2_region }}"
    filters:
      instance-state-name: running
      "tag:Workshop_gitlab": "{{ec2_name_prefix}}-gitlab"
  register: gitlab_node_facts

- name: grab facts for docs
  ec2_instance_facts:
    region: "{{ ec2_region }}"
    filters:
      instance-state-name: running
      "tag:Workshop_docs": "{{ec2_name_prefix}}-docs"
  register: docs_node_facts

- name: grab facts for instance 1
  ec2_instance_facts:
    region: "{{ ec2_region }}"
    filters:
      instance-state-name: running
      "tag:Workshop_instance1": "{{ec2_name_prefix}}-instance1"
  register: instance1_node_facts

- name: grab facts for workstation
  ec2_instance_facts:
    region: "{{ ec2_region }}"
    filters:
      instance-state-name: running
      "tag:Workshop_workstation": "{{ec2_name_prefix}}-workstation"
  register: workstation_node_facts

################### Get Passwords ###################

# TODO: why does this take so long on the first task?

- name: DomainController | Obtain windows passwords for instances
  ec2_win_password:
    region: '{{ ec2_region }}'
    instance_id: "{{ item.instance_id }}"
    key_file: "{{ playbook_dir }}/{{ ec2_name_prefix }}/{{ ec2_name_prefix }}-private.pem"
    wait: true
    wait_timeout: 300
  with_items: "{{ windc_node_facts.instances }}"
  register: ec2dc_password
  when: windc_node_facts is defined

- name: Workstation | Obtain windows passwords for instances
  ec2_win_password:
    region: '{{ ec2_region }}'
    instance_id: "{{ item.instance_id }}"
    key_file: "{{ playbook_dir }}/{{ ec2_name_prefix }}/{{ ec2_name_prefix }}-private.pem"
    wait: true
    wait_timeout: 300
  with_items: "{{ workstation_node_facts.instances }}"
  register: ec2workstation_password
  when: workstation_node_facts is defined

- name: Windows | Obtain windows passwords for instances
  ec2_win_password:
    region: '{{ ec2_region }}'
    instance_id: "{{ item.instance_id }}"
    key_file: "{{ playbook_dir }}/{{ ec2_name_prefix }}/{{ ec2_name_prefix }}-private.pem"
    wait: true
    wait_timeout: 300
  with_items: "{{ instance1_node_facts.instances }}"
  register: ec2windows_password
  when: instance1_node_facts is defined

################### Create inventories ###################

- name: GitLab | Add new instance to host group
  add_host:
    hostname: 'gitlab'
    username: "{{ item.tags.username }}"
    ansible_user: "{{ item.tags.username }}"
    ansible_ssh_private_key_file: "{{ playbook_dir }}/{{ ec2_name_prefix }}/{{ ec2_name_prefix }}-private.pem"
    ansible_host: "{{ item.public_ip_address }}"
    private_ip: "{{ item.private_ip_address }}"
    groups:
      - rhel
      - gitlab
  with_items: "{{ gitlab_node_facts.instances }}"

- name: Docs | Add new instance to host group
  add_host:
    hostname: 'docs'
    username: "{{ item.tags.username }}"
    ansible_user: "{{ item.tags.username }}"
    ansible_ssh_private_key_file: "{{ playbook_dir }}/{{ ec2_name_prefix }}/{{ ec2_name_prefix }}-private.pem"
    ansible_host: "{{ item.public_ip_address }}"
    private_ip: "{{ item.private_ip_address }}"
    groups:
      - rhel
      - docs
  with_items: "{{ docs_node_facts.instances }}"

- name: DomainController | Add new instance to host group
  add_host:
    hostname: "windc"
    ansible_host: "{{ item.item.public_ip_address }}"
    ansible_port: 5986
    ansible_user: "Administrator"
    ansible_password: "{{ item.win_password }}"
    ansible_connection: "winrm"
    private_ip: "{{ item.item.private_ip_address }}"
    ansible_winrm_transport: "ntlm"
    ansible_winrm_server_cert_validation: "ignore"
    ansible_winrm_operation_timeout_sec: 120
    ansible_winrm_read_timeout_sec: 150
    groups:
      - windows
      - windows_domain_controllers
  with_items: "{{ ec2dc_password.results }}"
  when: ec2dc_password is defined

- name: Windows instance1 | Add new instance to host group
  add_host:
    hostname: "student{{ item.item.tags.Student | regex_replace('[^0-9]', '') }}-win1"
    ansible_host: "{{ item.item.public_ip_address }}"
    private_ip: "{{ item.item.private_ip_address }}"
    ansible_port: 5986
    ansible_user: "Administrator"
    ansible_password: "{{ item.win_password }}"
    ansible_become_password: "{{ domain_admin_password }}"
    ansible_connection: "winrm"
    ansible_winrm_transport: "ntlm"
    ansible_winrm_server_cert_validation: "ignore"
    ansible_winrm_operation_timeout_sec: 120
    ansible_winrm_read_timeout_sec: 150
    student: "{{ item.item.tags.Student | regex_replace('[^0-9]', '') }}"
    groups:
      - windows
      - windows_instance1
  with_items: "{{ ec2windows_password.results }}"
  when: ec2windows_password is defined

- name: Workstation | Add new instance to host group
  add_host:
    hostname: "student{{ item.item.tags.Student | regex_replace('[^0-9]', '') }}-work"
    ansible_host: "{{ item.item.public_ip_address }}"
    private_ip: "{{ item.item.private_ip_address }}"
    ansible_port: 5986
    ansible_user: "Administrator"
    ansible_password: "{{ item.win_password }}"
    ansible_become_password: "{{ users_password }}"
    ansible_connection: "winrm"
    ansible_winrm_transport: "ntlm"
    ansible_winrm_server_cert_validation: "ignore"
    ansible_winrm_operation_timeout_sec: 120
    ansible_winrm_read_timeout_sec: 150
    student: "{{ item.item.tags.Student | regex_replace('[^0-9]', '') }}"
    groups:
      - windows
      - windows_workstations
  with_items: "{{ ec2workstation_password.results }}"
  when: ec2workstation_password is defined

# # Add new dns entries to make the url pretty
# - block:

#   - name: "Docs | Create DNS entry for {{ ec2_name_prefix }}.{{ public_dns_zone }}"
#     route53:
#       state: present
#       zone: "{{ public_dns_zone }}"
#       record: "{{ ec2_name_prefix }}.{{ public_dns_zone }}"
#       type: A
#       ttl: 600
#       value: "{{ item.public_ip_address }}"
#       wait: yes
#     with_items: "{{ docs_node_facts.instances }}"

# #  - name: "Docs | Create DNS entry for docs.{{ item.tags.long_name }}"
# #    route53:
# #      state: present
# #      zone: "{{ public_dns_zone }}"
# #      record: "{{ item.tags.long_name }}"
# #      type: A
# #      ttl: 600
# #      value: "{{ item.public_ip }}"
# #      wait: yes
# #    with_items: "{{ docs_instances.results | map(attribute='tagged_instances') | list }}"
# #
# #  - name: "GitLab | Create DNS entry for gitlab.{{ name_prefix }}.{{ public_dns_zone }}"
# #    route53:
# #      state: present
# #      zone: "{{ public_dns_zone }}"
# #      record: "{{ item.tags.long_name }}"
# #      type: A
# #      ttl: 600
# #      value: "{{ item.public_ip }}"
# #      wait: yes
# #    with_items: "{{ gitlab_instances.results | map(attribute='tagged_instances') | list }}"
# #
# #  - name: "Workstation | Create DNS entries for student workstations"
# #    route53:
# #      state: present
# #      zone: "{{ public_dns_zone }}"
# #      record: "{{ item.tags.long_name }}"
# #      type: A
# #      ttl: 600
# #      value: "{{ item.public_ip }}"
# #      wait: yes
# #    with_items: "{{ workstation_instances.results | map(attribute='tagged_instances') | list }}"

#   when: public_dns_zone is defined

# - name: GitLab | Wait for SSH to come up
#   wait_for_connection:
#   delegate_to: "{{ item }}"
#   with_items:
#     - "{{ groups['rhel'] }}"
#
- name: Windows | Wait for WinRM to come up
  wait_for_connection:
  delegate_to: "{{ item }}"
  with_items:
    - "{{ groups['windows'] }}"

###################

- name: Generate instructor inventory
  template:
    src: instructor_inventory_windows.j2
    dest: "{{ playbook_dir }}/{{ ec2_name_prefix }}/instructor_inventory.txt"

- name: Generate student inventories
  template:
    src: windows_instances.txt.j2
    dest: "{{ playbook_dir }}/{{ ec2_name_prefix }}/{{ user_prefix }}{{ item }}-instances.txt"
  with_sequence: count="{{ student_total }}"
