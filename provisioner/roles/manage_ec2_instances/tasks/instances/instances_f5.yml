---
############## f5 node ##############
- name: Create EC2 instances for f5 node (F5 MODE)
  ec2:
    assign_public_ip: true
    key_name: "{{ ec2_name_prefix }}-key"
    group: "{{ ec2_security_group }}"
    instance_type: "{{ ec2_info.f5node.size }}"
    image: "{{ f5_ami.image_id }}"
    region: "{{ ec2_region }}"
    exact_count: "{{ student_total }}"
    count_tag:
      Workshop_f5: "{{ec2_name_prefix}}-f5"
    wait: "{{ ec2_wait }}"
    vpc_subnet_id: "{{ ec2_vpc_subnet_id }}"
  register: f5_output

- name: Ensure tags are present for f5 node (F5 MODE)
  ec2_tag:
    region: "{{ ec2_region }}"
    resource: "{{item.1}}"
    state: present
    tags:
      Name: "{{ ec2_name_prefix }}-student{{item.0 + 1}}-f5"
      short_name: "f5"
      Workshop_f5: "{{ec2_name_prefix}}-f5"
      Workshop: "{{ec2_name_prefix}}"
      Workshop_type: "{{ workshop_type }}"
      Index: "{{ item[0] }}"
      Student: "student{{item.0 + 1}}"
      AWS_USERNAME: "{{ aws_user }}"
      Info: "AWS_USERNAME that provisioned this-> {{ aws_user }}"
      Linklight: "This was provisioned through the linklight provisioner"
      Students: "{{student_total}}"
      username: "{{ec2_info.f5node.username}}"
  with_indexed_items:
    - "{{ f5_output.instance_ids }}"
  when: f5_output.instance_ids is not none

- name: Create EC2 instances for node1 node in VPC (F5 MODE)
  ec2:
    assign_public_ip: true
    key_name: "{{ ec2_name_prefix }}-key"
    group: "{{ ec2_security_group }}"
    instance_type: "{{ ec2_info.rhel8.size }}"
    image: "{{ node1_ami.image_id }}"
    region: "{{ ec2_region }}"
    exact_count: "{{ student_total }}"
    count_tag:
      Workshop_node1: "{{ec2_name_prefix}}-node1"
    wait: "{{ ec2_wait }}"
    vpc_subnet_id: "{{ ec2_vpc_subnet_id }}"
  register: node1_output

- name: Ensure tags are present for node1 node (F5 MODE)
  ec2_tag:
    region: "{{ ec2_region }}"
    resource: "{{item.1.id}}"
    state: present
    tags:
      Name: "{{ ec2_name_prefix }}-student{{item.0 + 1}}-node1"
      Workshop_node1: "{{ec2_name_prefix}}-node1"
      Workshop: "{{ec2_name_prefix}}"
      Workshop_type: "{{ workshop_type }}"
      Index: "{{ item[0] }}"
      Student: "student{{item.0 + 1}}"
      AWS_USERNAME: "{{ aws_user }}"
      Info: "AWS_USERNAME that provisioned this-> {{ aws_user }}"
      Linklight: "This was provisioned through the linklight provisioner for F5 workshop"
      Students: "{{student_total}}"
      short_name: node1
      username: "{{ec2_info[rhel].username}}"
      launch_time: "{{item.1.launch_time}}"
  with_indexed_items:
    - "{{ node1_output.instances }}"
  when: node1_output.instance_ids is not none

- name: Create EC2 instances for node2 node in VPC (F5 MODE)
  ec2:
    assign_public_ip: true
    key_name: "{{ ec2_name_prefix }}-key"
    group: "{{ ec2_security_group }}"
    instance_type: "{{ ec2_info.rhel8.size }}"
    image: "{{ node1_ami.image_id }}"
    region: "{{ ec2_region }}"
    exact_count: "{{ student_total }}"
    count_tag:
      Workshop_node2: "{{ec2_name_prefix}}-node2"
    wait: "{{ ec2_wait }}"
    vpc_subnet_id: "{{ ec2_vpc_subnet_id }}"
  register: node2_output

- name: Ensure tags are present for node2 node (F5 MODE)
  ec2_tag:
    region: "{{ ec2_region }}"
    resource: "{{item.1.id}}"
    state: present
    tags:
      Name: "{{ ec2_name_prefix }}-student{{item.0 + 1}}-node2"
      Workshop_node2: "{{ec2_name_prefix}}-node2"
      Workshop: "{{ec2_name_prefix}}"
      Workshop_type: "{{ workshop_type }}"
      Index: "{{ item[0] }}"
      Student: "student{{item.0 + 1}}"
      AWS_USERNAME: "{{ aws_user }}"
      Info: "AWS_USERNAME that provisioned this-> {{ aws_user }}"
      Linklight: "This was provisioned through the linklight provisioner for F5 workshop"
      Students: "{{student_total}}"
      short_name: node2
      username: "{{ec2_info[rhel].username}}"
      launch_time: "{{item.1.launch_time}}"
  with_indexed_items:
    - "{{ node2_output.instances }}"
  when: node2_output.instance_ids is not none

############## eni check ##############

- name: grab all network interfaces for VPC 1 (F5 MODE)
  ec2_eni_facts:
    region: "{{ ec2_region }}"
    filters:
      vpc-id: "{{ec2_vpc_id}}"
  register: eni_facts_1

- name: Disable Source/Dest check on instance {{ec2_vpc_id}} (F5 MODE)
  ec2_eni:
    eni_id: "{{ item['network_interface_id'] }}"
    region: "{{ ec2_region }}"
    source_dest_check: false
  with_items:
    - "{{eni_facts_1['network_interfaces']}}"
