---
- import_tasks: ami_find_advanced_tower.yml

- name: Create EC2 instances for node1
  ec2:
    assign_public_ip: true
    key_name: "{{ ec2_name_prefix }}-key"
    group: "{{ ec2_security_group }}"
    instance_type: "{{ ec2_info[rhel].size }}"
    image: "{{ node_ami.image_id }}"
    region: "{{ ec2_region }}"
    exact_count: "{{ student_total }}"
    count_tag:
      Workshop_node1: "{{ec2_name_prefix}}-node1"
    wait: "{{ ec2_wait }}"
    vpc_subnet_id: "{{ ec2_vpc_subnet_id }}"
    volumes:
      - device_name: /dev/sda1
        volume_type: gp2
        volume_size: "{{ ec2_info[rhel].disk_space }}"
        delete_on_termination: true
  register: node1_output

- name: Ensure tags are present for node1
  ec2_tag:
    region: "{{ ec2_region }}"
    resource: "{{item.1.id}}"
    state: present
    tags:
      Name: "{{ ec2_name_prefix }}-student{{item.0 + 1}}-node1"
      Workshop_node1: "{{ec2_name_prefix}}-node1"
      Workshop: "{{ec2_name_prefix}}"
      Index: "{{ item[0] }}"
      Student: "student{{item.0 + 1}}"
      AWS_USERNAME: "{{ aws_user }}"
      Info: "AWS_USERNAME that provisioned this-> {{ aws_user }}"
      Linklight: "This was provisioned through the linklight provisioner"
      Students: "{{student_total}}"
      short_name: "node1"
      username: "{{ec2_info[rhel].username}}"
      launch_time: "{{item.1.launch_time}}"
  with_indexed_items:
    - "{{ node1_output.instances }}"
  when: node1_output.instance_ids is not none

- name: Create EC2 instances for node2
  ec2:
    assign_public_ip: true
    key_name: "{{ ec2_name_prefix }}-key"
    group: "{{ ec2_security_group }}"
    instance_type: "{{ ec2_info[rhel].size }}"
    image: "{{ node_ami.image_id }}"
    region: "{{ ec2_region }}"
    exact_count: "{{ student_total }}"
    count_tag:
      Workshop_node2: "{{ec2_name_prefix}}-node2"
    wait: "{{ ec2_wait }}"
    vpc_subnet_id: "{{ ec2_vpc_subnet_id }}"
    volumes:
      - device_name: /dev/sda1
        volume_type: gp2
        volume_size: "{{ ec2_info[rhel].disk_space }}"
        delete_on_termination: true
  register: node2_output

- name: Ensure tags are present for node2
  ec2_tag:
    region: "{{ ec2_region }}"
    resource: "{{item.1.id}}"
    state: present
    tags:
      Name: "{{ ec2_name_prefix }}-student{{item.0 + 1}}-node2"
      Workshop_node2: "{{ec2_name_prefix}}-node2"
      Workshop: "{{ec2_name_prefix}}"
      Index: "{{ item[0] }}"
      Student: "student{{item.0 + 1}}"
      AWS_USERNAME: "{{ aws_user }}"
      Info: "AWS_USERNAME that provisioned this-> {{ aws_user }}"
      Linklight: "This was provisioned through the linklight provisioner"
      Students: "{{student_total}}"
      short_name: "node2"
      username: "{{ec2_info[rhel].username}}"
      launch_time: "{{item.1.launch_time}}"
  with_indexed_items:
    - "{{ node2_output.instances }}"
  when: node2_output.instance_ids is not none

- name: Create EC2 instances for isonode
  ec2:
    assign_public_ip: true
    key_name: "{{ ec2_name_prefix }}-key"
    group: "{{ ec2_security_group }}"
    instance_type: "{{ ec2_info[rhel].size }}"
    image: "{{ node_ami.image_id }}"
    region: "{{ ec2_region }}"
    exact_count: "{{ student_total }}"
    count_tag:
      Workshop_isonode: "{{ec2_name_prefix}}-isonode"
    wait: "{{ ec2_wait }}"
    vpc_subnet_id: "{{ ec2_vpc_subnet_id }}"
    volumes:
      - device_name: /dev/sda1
        volume_type: gp2
        volume_size: "{{ ec2_info[rhel].disk_space }}"
        delete_on_termination: true
  register: isonode_output

- name: Ensure tags are present for isonode
  ec2_tag:
    region: "{{ ec2_region }}"
    resource: "{{item.1.id}}"
    state: present
    tags:
      Name: "{{ ec2_name_prefix }}-student{{item.0 + 1}}-isonode"
      Workshop_isonode: "{{ec2_name_prefix}}-isonode"
      Workshop: "{{ec2_name_prefix}}"
      Index: "{{ item[0] }}"
      Student: "student{{item.0 + 1}}"
      AWS_USERNAME: "{{ aws_user }}"
      Info: "AWS_USERNAME that provisioned this-> {{ aws_user }}"
      Linklight: "This was provisioned through the linklight provisioner"
      Students: "{{student_total}}"
      short_name: "isonode"
      username: "{{ec2_info[rhel].username}}"
      launch_time: "{{item.1.launch_time}}"
  with_indexed_items:
    - "{{ isonode_output.instances }}"
  when: isonode_output.instance_ids is not none

- name: Create EC2 instances for remote
  ec2:
    assign_public_ip: true
    key_name: "{{ ec2_name_prefix }}-key"
    group: "{{ ec2_security_group }}"
    instance_type: "{{ ec2_info[rhel].size }}"
    image: "{{ node_ami.image_id }}"
    region: "{{ ec2_region }}"
    exact_count: "{{ student_total }}"
    count_tag:
      Workshop_remote: "{{ec2_name_prefix}}-remote"
    wait: "{{ ec2_wait }}"
    vpc_subnet_id: "{{ ec2_vpc_subnet_id }}"
    volumes:
      - device_name: /dev/sda1
        volume_type: gp2
        volume_size: "{{ ec2_info[rhel].disk_space }}"
        delete_on_termination: true
  register: remote_output

- name: Ensure tags are present for remote
  ec2_tag:
    region: "{{ ec2_region }}"
    resource: "{{item.1.id}}"
    state: present
    tags:
      Name: "{{ ec2_name_prefix }}-student{{item.0 + 1}}-remote"
      Workshop_remote: "{{ec2_name_prefix}}-remote"
      Workshop: "{{ec2_name_prefix}}"
      Index: "{{ item[0] }}"
      Student: "student{{item.0 + 1}}"
      AWS_USERNAME: "{{ aws_user }}"
      Info: "AWS_USERNAME that provisioned this-> {{ aws_user }}"
      Linklight: "This was provisioned through the linklight provisioner"
      Students: "{{student_total}}"
      short_name: "remote"
      username: "{{ec2_info[rhel].username}}"
      launch_time: "{{item.1.launch_time}}"
  with_indexed_items:
    - "{{ remote_output.instances }}"
  when: remote_output.instance_ids is not none

# Tower DB
- name: Create EC2 instances for towerdb
  ec2:
    assign_public_ip: true
    key_name: "{{ ec2_name_prefix }}-key"
    group: "{{ ec2_security_group }}"
    instance_type: "{{ ec2_info[rhel].size }}"
    image: "{{ towerdb_ami.image_id }}"
    region: "{{ ec2_region }}"
    exact_count: "{{ student_total }}"
    count_tag:
      Workshop_towerdb: "{{ec2_name_prefix}}-towerdb"
    wait: "{{ ec2_wait }}"
    vpc_subnet_id: "{{ ec2_vpc_subnet_id }}"
    volumes:
      - device_name: /dev/sda1
        volume_type: gp2
        volume_size: "{{ ec2_info[rhel].disk_space }}"
        delete_on_termination: true
  register: towerdb_output

- name: Ensure tags are present for towerdb
  ec2_tag:
    region: "{{ ec2_region }}"
    resource: "{{item.1.id}}"
    state: present
    tags:
      Name: "{{ ec2_name_prefix }}-student{{item.0 + 1}}-towerdb"
      Workshop_towerdb: "{{ec2_name_prefix}}-towerdb"
      Workshop: "{{ec2_name_prefix}}"
      Index: "{{ item[0] }}"
      Student: "student{{item.0 + 1}}"
      AWS_USERNAME: "{{ aws_user }}"
      Info: "AWS_USERNAME that provisioned this-> {{ aws_user }}"
      Linklight: "This was provisioned through the linklight provisioner"
      Students: "{{student_total}}"
      short_name: "towerdb"
      username: "{{ec2_info[rhel].username}}"
      launch_time: "{{item.1.launch_time}}"
  with_indexed_items:
    - "{{ towerdb_output.instances }}"
  when: towerdb_output.instance_ids is not none

# # Tower Node 1
# - name: Create EC2 instances for towernode1
#   ec2:
#     assign_public_ip: true
#     key_name: "{{ ec2_name_prefix }}-key"
#     group: "{{ ec2_security_group }}"
#     instance_type: "{{ ec2_info[tower_type].size }}"
#     image: "{{ towernode_ami.image_id }}"
#     region: "{{ ec2_region }}"
#     exact_count: "{{ student_total }}"
#     count_tag:
#       Workshop_towernode1: "{{ec2_name_prefix}}-towernode1"
#     wait: "{{ ec2_wait }}"
#     vpc_subnet_id: "{{ ec2_vpc_subnet_id }}"
#     volumes:
#       - device_name: /dev/sda1
#         volume_type: gp2
#         volume_size: "{{ ec2_info[tower_type].disk_space }}"
#         delete_on_termination: true
#   register: towernode1_output

# - name: Ensure tags are present for towernode1
#   ec2_tag:
#     region: "{{ ec2_region }}"
#     resource: "{{item.1.id}}"
#     state: present
#     tags:
#       Name: "{{ ec2_name_prefix }}-student{{item.0 + 1}}-towernode1"
#       Workshop_towernode1: "{{ec2_name_prefix}}-towernode1"
#       Workshop: "{{ec2_name_prefix}}"
#       Index: "{{ item[0] }}"
#       Student: "student{{item.0 + 1}}"
#       AWS_USERNAME: "{{ aws_user }}"
#       Info: "AWS_USERNAME that provisioned this-> {{ aws_user }}"
#       Linklight: "This was provisioned through the linklight provisioner"
#       Students: "{{student_total}}"
#       short_name: "towernode1"
#       username: "{{ec2_info[rhel].username}}"
#       launch_time: "{{item.1.launch_time}}"
#   with_indexed_items:
#     - "{{ towernode1_output.instances }}"
#   when: towernode1_output.instance_ids is not none

# Tower Node 2
- name: Create EC2 instances for towernode2
  ec2:
    assign_public_ip: true
    key_name: "{{ ec2_name_prefix }}-key"
    group: "{{ ec2_security_group }}"
    instance_type: "{{ ec2_info[tower_type].size }}"
    image: "{{ towernode_ami.image_id }}"
    region: "{{ ec2_region }}"
    exact_count: "{{ student_total }}"
    count_tag:
      Workshop_towernode2: "{{ec2_name_prefix}}-towernode2"
    wait: "{{ ec2_wait }}"
    vpc_subnet_id: "{{ ec2_vpc_subnet_id }}"
    volumes:
      - device_name: /dev/sda1
        volume_type: gp2
        volume_size: "{{ ec2_info[tower_type].disk_space }}"
        delete_on_termination: true
  register: towernode2_output

- name: Ensure tags are present for towernode2
  ec2_tag:
    region: "{{ ec2_region }}"
    resource: "{{item.1.id}}"
    state: present
    tags:
      Name: "{{ ec2_name_prefix }}-student{{item.0 + 1}}-towernode2"
      Workshop_towernode2: "{{ec2_name_prefix}}-towernode2"
      Workshop: "{{ec2_name_prefix}}"
      Index: "{{ item[0] }}"
      Student: "student{{item.0 + 1}}"
      AWS_USERNAME: "{{ aws_user }}"
      Info: "AWS_USERNAME that provisioned this-> {{ aws_user }}"
      Linklight: "This was provisioned through the linklight provisioner"
      Students: "{{student_total}}"
      short_name: "towernode2"
      username: "{{ec2_info[rhel].username}}"
      launch_time: "{{item.1.launch_time}}"
  with_indexed_items:
    - "{{ towernode2_output.instances }}"
  when: towernode2_output.instance_ids is not none

# Tower Node 3
- name: Create EC2 instances for towernode3
  ec2:
    assign_public_ip: true
    key_name: "{{ ec2_name_prefix }}-key"
    group: "{{ ec2_security_group }}"
    instance_type: "{{ ec2_info[tower_type].size }}"
    image: "{{ towernode_ami.image_id }}"
    region: "{{ ec2_region }}"
    exact_count: "{{ student_total }}"
    count_tag:
      Workshop_towernode3: "{{ec2_name_prefix}}-towernode3"
    wait: "{{ ec2_wait }}"
    vpc_subnet_id: "{{ ec2_vpc_subnet_id }}"
    volumes:
      - device_name: /dev/sda1
        volume_type: gp2
        volume_size: "{{ ec2_info[tower_type].disk_space }}"
        delete_on_termination: true
  register: towernode3_output

- name: Ensure tags are present for towernode3
  ec2_tag:
    region: "{{ ec2_region }}"
    resource: "{{item.1.id}}"
    state: present
    tags:
      Name: "{{ ec2_name_prefix }}-student{{item.0 + 1}}-towernode3"
      Workshop_towernode3: "{{ec2_name_prefix}}-towernode3"
      Workshop: "{{ec2_name_prefix}}"
      Index: "{{ item[0] }}"
      Student: "student{{item.0 + 1}}"
      AWS_USERNAME: "{{ aws_user }}"
      Info: "AWS_USERNAME that provisioned this-> {{ aws_user }}"
      Linklight: "This was provisioned through the linklight provisioner"
      Students: "{{student_total}}"
      short_name: "towernode3"
      username: "{{ec2_info[rhel].username}}"
      launch_time: "{{item.1.launch_time}}"
  with_indexed_items:
    - "{{ towernode3_output.instances }}"
  when: towernode3_output.instance_ids is not none
