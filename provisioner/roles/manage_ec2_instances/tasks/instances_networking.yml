---
- import_tasks: ami_find_networking.yml

- name: set router types to network_type
  set_fact:
    rtr1_type: "{{network_type}}"
    rtr2_type: "{{network_type}}"
    rtr3_type: "{{network_type}}"
    rtr4_type: "{{network_type}}"
  when: network_type != "multivendor"

############## Router 1 ##############
- name: Create EC2 instances for rtr1 node (NETWORKING MODE)
  ec2:
    assign_public_ip: true
    key_name: "{{ ec2_name_prefix }}-key"
    group: "{{ ec2_security_group }}"
    instance_type: "{{ec2_info[rtr1_type].size}}"
    image: "{{ec2_info[rtr1_type].ami.image_id}}"
    region: "{{ ec2_region }}"
    exact_count: "{{ student_total }}"
    user_data: ''
    count_tag:
      Workshop_rtr1: "{{ec2_name_prefix}}-rtr1"
    wait: "{{ ec2_wait }}"
    vpc_subnet_id: "{{ ec2_vpc_subnet_id }}"
    volumes: "{{ec2_info[rtr1_type].volume | default(omit)}}"
  register: rtr1_output

- name: Ensure tags are present for rtr1 node (NETWORKING MODE)
  ec2_tag:
    region: "{{ ec2_region }}"
    resource: "{{item.1.id}}"
    state: present
    tags:
      Name: "{{ ec2_name_prefix }}-student{{item.0 + 1}}-rtr1"
      Workshop_rtr1: "{{ec2_name_prefix}}-rtr1"
      Workshop: "{{ec2_name_prefix}}"
      Index: "{{ item[0] }}"
      Student: "student{{item.0 + 1}}"
      AWS_USERNAME: "{{ aws_user }}"
      Info: "AWS_USERNAME that provisioned this-> {{ aws_user }}"
      Linklight: "This was provisioned through the linklight provisioner"
      Students: "{{student_total}}"
      short_name: "rtr1"
      ansible_network_os: "{{ec2_info[rtr1_type].os}}"
      username: "{{ec2_info[rtr1_type].username}}"
      launch_time: "{{item.1.launch_time}}"
  with_indexed_items:
    - "{{ rtr1_output.instances }}"
  when: rtr1_output.instance_ids is not none

############## Router 2 ##############
- name: Create EC2 instances for rtr2 node in VPC-2 (NETWORKING MODE)
  ec2:
    assign_public_ip: true
    key_name: "{{ ec2_name_prefix }}-key"
    group: "{{ ec2_security_group2 }}"
    instance_type: "{{ec2_info[rtr2_type].size }}"
    image: "{{ec2_info[rtr2_type].ami.image_id}}"
    region: "{{ ec2_region }}"
    exact_count: "{{ student_total }}"
    user_data: ''
    count_tag:
      Workshop_rtr2: "{{ec2_name_prefix}}-rtr2"
    wait: "{{ ec2_wait }}"
    vpc_subnet_id: "{{ ec2_vpc_subnet_id2 }}"
    volumes: "{{ec2_info[rtr2_type].volume | default(omit)}}"
  register: rtr2_output

- name: Ensure tags are present for rtr2 node (NETWORKING MODE)
  ec2_tag:
    region: "{{ ec2_region }}"
    resource: "{{item.1.id}}"
    state: present
    tags:
      Name: "{{ ec2_name_prefix }}-student{{item.0 + 1}}-rtr2"
      Workshop_rtr2: "{{ec2_name_prefix}}-rtr2"
      Workshop: "{{ec2_name_prefix}}"
      Index: "{{ item[0] }}"
      Student: "student{{item.0 + 1}}"
      AWS_USERNAME: "{{ aws_user }}"
      Info: "AWS_USERNAME that provisioned this-> {{ aws_user }}"
      Linklight: "This was provisioned through the linklight provisioner"
      Students: "{{student_total}}"
      short_name: "rtr2"
      ansible_network_os: "{{ec2_info[rtr2_type].os}}"
      username: "{{ec2_info[rtr1_type].username}}"
      launch_time: "{{item.1.launch_time}}"
  with_indexed_items:
    - "{{ rtr2_output.instances }}"
  when: rtr2_output.instance_ids is not none

############## Router 3 ##############
- name: Create EC2 instances for rtr3 node (NETWORKING MODE)
  ec2:
    assign_public_ip: true
    key_name: "{{ ec2_name_prefix }}-key"
    group: "{{ ec2_security_group }}"
    instance_type: "{{ec2_info[rtr3_type].size }}"
    image: "{{ec2_info[rtr3_type].ami.image_id}}"
    region: "{{ ec2_region }}"
    exact_count: "{{ student_total }}"
    user_data: ''
    count_tag:
      Workshop_rtr3: "{{ec2_name_prefix}}-rtr3"
    wait: "{{ ec2_wait }}"
    vpc_subnet_id: "{{ ec2_vpc_subnet_id }}"
    volumes: "{{ec2_info[rtr3_type].volume | default(omit)}}"
  register: rtr3_output

- name: Ensure tags are present for rtr3 node (NETWORKING MODE)
  ec2_tag:
    region: "{{ ec2_region }}"
    resource: "{{item.1.id}}"
    state: present
    tags:
      Name: "{{ ec2_name_prefix }}-student{{item.0 + 1}}-rtr3"
      Workshop_rtr3: "{{ec2_name_prefix}}-rtr3"
      Workshop: "{{ec2_name_prefix}}"
      Index: "{{ item[0] }}"
      Student: "student{{item.0 + 1}}"
      AWS_USERNAME: "{{ aws_user }}"
      Info: "AWS_USERNAME that provisioned this-> {{ aws_user }}"
      Linklight: "This was provisioned through the linklight provisioner"
      Students: "{{student_total}}"
      short_name: "rtr3"
      ansible_network_os: "{{ec2_info[rtr3_type].os}}"
      username: "{{ec2_info[rtr1_type].username}}"
      launch_time: "{{item.1.launch_time}}"
  with_indexed_items:
    - "{{ rtr3_output.instances }}"
  when: rtr3_output.instance_ids is not none

############## Router 4 ##############
- name: Create EC2 instances for rtr4 node in VPC-2 (NETWORKING MODE)
  ec2:
    assign_public_ip: true
    key_name: "{{ ec2_name_prefix }}-key"
    group: "{{ ec2_security_group2 }}"
    instance_type: "{{ec2_info[rtr4_type].size }}"
    image: "{{ec2_info[rtr4_type].ami.image_id}}"
    region: "{{ ec2_region }}"
    exact_count: "{{ student_total }}"
    user_data: ''
    count_tag:
      Workshop_rtr4: "{{ec2_name_prefix}}-rtr4"
    wait: "{{ ec2_wait }}"
    vpc_subnet_id: "{{ ec2_vpc_subnet_id2 }}"
    volumes: "{{ec2_info[rtr4_type].volume | default(omit)}}"
  register: rtr4_output

- name: Ensure tags are present for rtr4 node (NETWORKING MODE)
  ec2_tag:
    region: "{{ ec2_region }}"
    resource: "{{item.1.id}}"
    state: present
    tags:
      Name: "{{ ec2_name_prefix }}-student{{item.0 + 1}}-rtr4"
      Workshop_rtr4: "{{ec2_name_prefix}}-rtr4"
      Workshop: "{{ec2_name_prefix}}"
      Index: "{{ item[0] }}"
      Student: "student{{item.0 + 1}}"
      AWS_USERNAME: "{{ aws_user }}"
      Info: "AWS_USERNAME that provisioned this-> {{ aws_user }}"
      Linklight: "This was provisioned through the linklight provisioner"
      Students: "{{student_total}}"
      short_name: "rtr4"
      ansible_network_os: "{{ec2_info[rtr4_type].os}}"
      username: "{{ec2_info[rtr1_type].username}}"
      launch_time: "{{item.1.launch_time}}"
  with_indexed_items:
    - "{{ rtr4_output.instances }}"
  when: rtr4_output.instance_ids is not none

- name: grab all network interfaces for VPC 1 (NETWORKING MODE)
  ec2_eni_facts:
    region: "{{ ec2_region }}"
    filters:
      vpc-id: "{{ec2_vpc_id}}"
  register: eni_facts_1

- name: grab all network interfaces for VPC 2 (NETWORKING MODE)
  ec2_eni_facts:
    region: "{{ ec2_region }}"
    filters:
      vpc-id: "{{ec2_vpc_id2}}"
  register: eni_facts_2

- name: Disable Source/Dest check on instance {{ec2_vpc_id1}} (NETWORKING MODE)
  ec2_eni:
    eni_id: "{{ item['network_interface_id'] }}"
    region: "{{ ec2_region }}"
    source_dest_check: false
  with_items:
    - "{{eni_facts_1['network_interfaces']}}"
    - "{{eni_facts_2['network_interfaces']}}"
