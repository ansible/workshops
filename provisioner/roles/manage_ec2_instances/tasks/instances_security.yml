- import_tasks: ami_find_security.yml

- name: Create EC2 instances for splunk
  ec2:
    assign_public_ip: yes
    key_name: "{{ ec2_name_prefix }}-key"
    group: "{{ ec2_security_group }}"
    instance_type: "{{ ec2_info['splunk_enterprise']['size'] }}"
    image: "{{ splunk_ami['image_id'] }}"
    region: "{{ ec2_region }}"
    exact_count: "{{ student_total }}"
    count_tag:
      Workshop_splunk: "{{ec2_name_prefix}}-splunk"
    wait: "{{ ec2_wait }}"
    vpc_subnet_id: "{{ ec2_vpc_subnet_id }}"
    volumes:
      - device_name: /dev/sda1
        volume_type: gp2
        volume_size: "{{ ec2_info['splunk_enterprise']['disk_space'] }}"
        delete_on_termination: true
  register: splunk_output

- name: Ensure tags are present for splunk
  ec2_tag:
    region: "{{ ec2_region }}"
    resource: "{{item[1]}}"
    state: present
    tags:
      Name: "{{ ec2_name_prefix }}-student{{item[0] + 1}}-splunk"
      Workshop_splunk: "{{ec2_name_prefix}}-splunk"
      Workshop: "{{ec2_name_prefix}}"
      Index: "{{ item[0] }}"
      Student: "student{{item[0] + 1}}"
      AWS_USERNAME: "{{ linklight_user }}"
      Info: "AWS_USERNAME that provisioned this-> {{ linklight_user }}"
      Linklight: "This was provisioned through the linklight provisioner"
      Students: "{{student_total}}"
      short_name: "splunk"
      username: '{{ec2_info["rhel7"]["username"]}}'
  with_indexed_items:
    - "{{ splunk_output['instance_ids'] }}"
  when: splunk_output['instance_ids'] is not none

- name: Create EC2 instances for snort
  ec2:
    assign_public_ip: yes
    key_name: "{{ ec2_name_prefix }}-key"
    group: "{{ ec2_security_group }}"
    instance_type: "{{ ec2_info['rhel7']['size'] }}"
    image: "{{ snort_ami['image_id'] }}"
    region: "{{ ec2_region }}"
    exact_count: "{{ student_total }}"
    count_tag:
      Workshop_snort: "{{ec2_name_prefix}}-snort"
    wait: "{{ ec2_wait }}"
    vpc_subnet_id: "{{ ec2_vpc_subnet_id }}"
    volumes:
      - device_name: /dev/sda1
        volume_type: gp2
        volume_size: "{{ ec2_info['rhel7']['disk_space'] }}"
        delete_on_termination: true
  register: snort_output

- name: Ensure tags are present for snort
  ec2_tag:
    region: "{{ ec2_region }}"
    resource: "{{item[1]}}"
    state: present
    tags:
      Name: "{{ ec2_name_prefix }}-student{{item[0] + 1}}-snort"
      Workshop_snort: "{{ec2_name_prefix}}-snort"
      Workshop: "{{ec2_name_prefix}}"
      Index: "{{ item[0] }}"
      Student: "student{{item[0] + 1}}"
      AWS_USERNAME: "{{ linklight_user }}"
      Info: "AWS_USERNAME that provisioned this-> {{ linklight_user }}"
      Linklight: "This was provisioned through the linklight provisioner"
      Students: "{{student_total}}"
      short_name: "snort"
      username: '{{ec2_info["rhel7"]["username"]}}'
  with_indexed_items:
    - "{{ snort_output['instance_ids'] }}"
  when: snort_output['instance_ids'] is not none

##############Check Point CloudGuard IaaS Security Management##############
- name: Create EC2 instances for Check Point CloudGuard Security Management
  ec2:
    assign_public_ip: yes
    key_name: "{{ ec2_name_prefix }}-key"
    group: "{{ ec2_security_group }}"
    instance_type: "{{ec2_info.checkpoint_mgmt.size }}"
    image: "{{ec2_info.checkpoint_mgmt.ami.image_id}}"
    region: "{{ ec2_region }}"
    exact_count: "{{ student_total }}"
    user_data: ''
    count_tag:
      Workshop_checkpoint: "{{ec2_name_prefix}}-checkpoint"
    wait: "{{ ec2_wait }}"
    vpc_subnet_id: "{{ ec2_vpc_subnet_id }}"
  register: checkpoint_mgmt_output

- name: Ensure tags are present for Check Point CloudGuard Security Management node (SECURITY MODE)
  ec2_tag:
    region: "{{ ec2_region }}"
    resource: "{{item.1}}"
    state: present
    tags:
      Name: "{{ ec2_name_prefix }}-student{{item.0 + 1}}-checkpoint_mgmt"
      Workshop_checkpoint: "{{ec2_name_prefix}}-checkpoint"
      Workshop: "{{ec2_name_prefix}}"
      Index: "{{ item[0] }}"
      Student: "student{{item.0 + 1}}"
      AWS_USERNAME: "{{ linklight_user }}"
      Info: "AWS_USERNAME that provisioned this-> {{ linklight_user }}"
      Linklight: "This was provisioned through the linklight provisioner"
      Students: "{{student_total}}"
      short_name: "checkpoint_mgmt"
      username: "{{ec2_info.checkpoint_mgmt.username}}"
      short_name: "checkpoint-mgmt"
      username: "{{ec2_info.checkpoint_mgmt.username}}"
  with_indexed_items:
    - "{{ checkpoint_mgmt_output.instance_ids }}"
  when: checkpoint_mgmt_output.instance_ids is not none

##############Check Point CloudGuard IaaS Gateway ##############
- name: Create EC2 instances for Check Point CloudGuard Gateway
  ec2:
    assign_public_ip: yes
    key_name: "{{ ec2_name_prefix }}-key"
    group: "{{ ec2_security_group }}"
    instance_type: "{{ec2_info.checkpoint_gw.size }}"
    image: "{{ec2_info.checkpoint_gw.ami.image_id}}"
    region: "{{ ec2_region }}"
    exact_count: "{{ student_total }}"
    user_data: ''
    count_tag:
      Workshop_security: "{{ec2_name_prefix}}-security"
    wait: "{{ ec2_wait }}"
    vpc_subnet_id: "{{ ec2_vpc_subnet_id }}"
  register: checkpoint_gw_output

- name: Ensure tags are present for Check Point CloudGuard Security Management node (SECURITY MODE)
  ec2_tag:
    region: "{{ ec2_region }}"
    resource: "{{item.1}}"
    state: present
    tags:
      Name: "{{ ec2_name_prefix }}-student{{item.0 + 1}}-checkpoint_gw"
      Workshop: "{{ec2_name_prefix}}"
      Index: "{{ item[0] }}"
      Student: "student{{item.0 + 1}}"
      AWS_USERNAME: "{{ linklight_user }}"
      Info: "AWS_USERNAME that provisioned this-> {{ linklight_user }}"
      Linklight: "This was provisioned through the linklight provisioner"
      Students: "{{student_total}}"
      short_name: "checkpoint_gw"
      username: "{{ec2_info.checkpoint_gw.username}}"
  with_indexed_items:
    - "{{ checkpoint_gw_output.instance_ids }}"
  when: checkpoint_gw_output.instance_ids is not none
