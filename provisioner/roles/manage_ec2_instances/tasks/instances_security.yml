---
- import_tasks: ami_find_security.yml

- set_fact:
    async_timeout_seconds: "{{ student_total * 60 }}"
    async_wait_for_retries: "{{ student_total * 10 }}"

- name: Create EC2 Block - SECURITY MODE
  block:
    - name: Create EC2 instances for qradar
      ec2:
        assign_public_ip: true
        key_name: "{{ ec2_name_prefix }}-key"
        group: "{{ ec2_security_group }}"
        instance_type: "{{ ec2_info['qradar']['size'] }}"
        image: "{{ qradar_ami['image_id'] }}"
        region: "{{ ec2_region }}"
        exact_count: "{{ student_total }}"
        count_tag:
          Workshop_qradar: "{{ec2_name_prefix}}-qradar"
        wait: "{{ ec2_wait }}"
        vpc_subnet_id: "{{ ec2_vpc_subnet_id }}"
        volumes:
          - device_name: /dev/sda1
            volume_type: gp2
            volume_size: "{{ ec2_info['qradar']['disk_space'] }}"
            delete_on_termination: true
      when: security_console == 'qradar'
      async: "{{ async_timeout_seconds }}"
      poll: 0
      register: qradar_async

    - name: Create EC2 instances for splunk
      ec2:
        assign_public_ip: true
        key_name: "{{ ec2_name_prefix }}-key"
        group: "{{ ec2_security_group }}"
        instance_type: "{{ ec2_info['splunk_enterprise']['size'] }}"
        image: "{{ splunk_ami['image_id'] }}"
        region: "{{ ec2_region }}"
        exact_count: "{{ student_total }}"
        count_tag:
          Workshop_splunk: "{{ec2_name_prefix}}-splunk"
        wait: "{{ ec2_wait }}"
        vpc_subnet_id: "{{ ec2_vpc_subnet_id }}"
        volumes:
          - device_name: /dev/sda1
            volume_type: gp2
            volume_size: "{{ ec2_info['splunk_enterprise']['disk_space'] }}"
            delete_on_termination: true
      when: security_console == 'splunk'
      async: "{{ async_timeout_seconds }}"
      poll: 0
      register: splunk_async

    - set_fact:
        siem_async: "{{splunk_async}}"
      when: security_console == 'splunk'
    - set_fact:
        siem_async: "{{qradar_async}}"
      when: security_console == 'qradar'

    - name: Create EC2 instances for snort
      ec2:
        assign_public_ip: true
        key_name: "{{ ec2_name_prefix }}-key"
        group: "{{ ec2_security_group }}"
        instance_type: "{{ ec2_info['rhel7']['size'] }}"
        image: "{{ snort_ami['image_id'] }}"
        region: "{{ ec2_region }}"
        exact_count: "{{ student_total }}"
        count_tag:
          Workshop_snort: "{{ec2_name_prefix}}-snort"
        wait: "{{ ec2_wait }}"
        vpc_subnet_id: "{{ ec2_vpc_subnet_id }}"
        volumes:
          - device_name: /dev/sda1
            volume_type: gp2
            volume_size: "{{ ec2_info['rhel7']['disk_space'] }}"
            delete_on_termination: true
      async: "{{ async_timeout_seconds }}"
      poll: 0
      register: snort_async

    - name: Create EC2 instances for attack simulation node
      ec2:
        assign_public_ip: true
        key_name: "{{ ec2_name_prefix }}-key"
        group: "{{ ec2_security_group }}"
        instance_type: "{{ ec2_info['rhel7']['size'] }}"
        image: "{{ attacker_ami['image_id'] }}"
        region: "{{ ec2_region }}"
        exact_count: "{{ student_total }}"
        count_tag:
          Workshop_attacker: "{{ec2_name_prefix}}-attacker"
        wait: "{{ ec2_wait }}"
        vpc_subnet_id: "{{ ec2_vpc_subnet_id }}"
        volumes:
          - device_name: /dev/sda1
            volume_type: gp2
            volume_size: "{{ ec2_info['rhel7']['disk_space'] }}"
            delete_on_termination: true
      async: "{{ async_timeout_seconds }}"
      poll: 0
      register: attacker_async

    - name: Create EC2 instances for Check Point CloudGuard Security Management
      ec2:
        assign_public_ip: true
        key_name: "{{ ec2_name_prefix }}-key"
        group: "{{ ec2_security_group }}"
        instance_type: "{{ec2_info.checkpoint_mgmt.size }}"
        image: "{{ec2_info.checkpoint_mgmt.ami.image_id}}"
        region: "{{ ec2_region }}"
        exact_count: "{{ student_total }}"
        user_data: "{{ lookup('template', 'gaia-mgmt-ftw-user-data.sh.j2') }}"
        count_tag:
          Workshop_checkpoint_mgmt: "{{ec2_name_prefix}}-checkpoint"
        wait: "{{ ec2_wait }}"
        vpc_subnet_id: "{{ ec2_vpc_subnet_id }}"
      async: "{{ async_timeout_seconds }}"
      poll: 0
      register: checkpoint_mgmt_async

    - name: Create EC2 instances for Windows Workstation (SECURITY MODE)
      ec2:
        assign_public_ip: true
        key_name: "{{ ec2_name_prefix }}-key"
        group: "{{ ec2_security_group }}"
        instance_type: "{{ec2_info.windows_ws.size }}"
        image: "{{ec2_info.windows_ws.ami.image_id}}"
        region: "{{ ec2_region }}"
        exact_count: "{{ student_total }}"
        user_data: "{{ lookup('template', 'windows_userdata.txt.j2') }}"
        count_tag:
          Workshop_windows: "{{ec2_name_prefix}}-windows"
        wait: "{{ ec2_wait }}"
        vpc_subnet_id: "{{ ec2_vpc_subnet_id }}"
        guid: {{ ec2_name_prefix }}"
      async: "{{ async_timeout_seconds }}"
      poll: 0
      register: windows_ws_async


    ###########################################################################
    ### THIS IS A BIT OF A HACK AND REQUIRES BOOK KEEPING BUT IT'S FAST
    #
    #   The order in which the _async vars are listed here is the order in
    #   which they will be registered in the
    #   wait_for_ec2_instance_creation['results'] variable and that is important
    #   for the following set_fact that makes that information usable later on
    - name: Wait for async instance creation to complete
      async_status:
        jid: "{{ item['ansible_job_id'] }}"
      register: wait_for_ec2_instance_creation
      when: "'ansible_job_id' in item"
      until: wait_for_ec2_instance_creation.finished
      retries: "{{ async_wait_for_retries }}"
      loop:
        - "{{siem_async}}"
        - "{{snort_async}}"
        - "{{attacker_async}}"
        - "{{checkpoint_mgmt_async}}"
        - "{{windows_ws_async}}"

    # BOOK KEEPING FOR ABOVE async_status
    #   NOTE: Order matters here and must match the above task
    - set_fact:
        siem_output: "{{wait_for_ec2_instance_creation['results'][0]}}"
        snort_output: "{{wait_for_ec2_instance_creation['results'][1]}}"
        attacker_output: "{{wait_for_ec2_instance_creation['results'][2]}}"
        checkpoint_mgmt_output: "{{wait_for_ec2_instance_creation['results'][3]}}"
        windows_ws_output: "{{wait_for_ec2_instance_creation['results'][4]}}"

        ###
        ###########################################################################

- name: EC2 Tags Block - SECURITY MODE
  block:
    - name: Ensure tags are present for splunk
      ec2_tag:
        region: "{{ ec2_region }}"
        resource: "{{item[1]['id']}}"
        state: present
        tags:
          Name: "{{ ec2_name_prefix }}-student{{item[0] + 1}}-splunk"
          Workshop_splunk: "{{ec2_name_prefix}}-splunk"
          Workshop: "{{ec2_name_prefix}}"
          Index: "{{ item[0] }}"
          Student: "student{{item[0] + 1}}"
          AWS_USERNAME: "{{ aws_user }}"
          Info: "AWS_USERNAME that provisioned this-> {{ aws_user }}"
          Linklight: "This was provisioned through the linklight provisioner"
          Students: "{{student_total}}"
          short_name: "splunk"
          username: '{{ec2_info["rhel7"]["username"]}}'
          launch_time: "{{item.1.launch_time}}"
          guid: {{ ec2_name_prefix }}"
      with_indexed_items:
        - "{{ siem_output.instances }}"
      async: "{{ async_timeout_seconds }}"
      poll: 0
      register: ensure_tags_splunk_async
      when:
        - (security_console == 'splunk') and (siem_output['instance_ids'] is not none)

    - name: Ensure tags are present for qradar
      ec2_tag:
        region: "{{ ec2_region }}"
        resource: "{{item[1]['id']}}"
        state: present
        tags:
          Name: "{{ ec2_name_prefix }}-student{{item[0] + 1}}-qradar"
          Workshop_qradar: "{{ec2_name_prefix}}-qradar"
          Workshop: "{{ec2_name_prefix}}"
          Index: "{{ item[0] }}"
          Student: "student{{item[0] + 1}}"
          AWS_USERNAME: "{{ aws_user }}"
          Info: "AWS_USERNAME that provisioned this-> {{ aws_user }}"
          Linklight: "This was provisioned through the linklight provisioner"
          Students: "{{student_total}}"
          short_name: "qradar"
          username: '{{ec2_info["rhel7"]["username"]}}'
          launch_time: "{{item.1.launch_time}}"
          guid: {{ ec2_name_prefix }}"
      with_indexed_items:
        - "{{ siem_output.instances }}"
      async: "{{ async_timeout_seconds }}"
      poll: 0
      register: ensure_tags_qradar_async
      when:
        - (security_console == 'qradar') and (siem_output['instance_ids'] is not none)

    - set_fact:
        ensure_tags_siem_async: "{{ensure_tags_splunk_async}}"
      when: security_console == 'splunk'
    - set_fact:
        ensure_tags_siem_async: "{{ensure_tags_qradar_async}}"
      when: security_console == 'qradar'

    - name: Ensure tags are present for snort
      ec2_tag:
        region: "{{ ec2_region }}"
        resource: "{{item[1]['id']}}"
        state: present
        tags:
          Name: "{{ ec2_name_prefix }}-student{{item[0] + 1}}-snort"
          Workshop_snort: "{{ec2_name_prefix}}-snort"
          Workshop: "{{ec2_name_prefix}}"
          Index: "{{ item[0] }}"
          Student: "student{{item[0] + 1}}"
          AWS_USERNAME: "{{ aws_user }}"
          Info: "AWS_USERNAME that provisioned this-> {{ aws_user }}"
          Linklight: "This was provisioned through the linklight provisioner"
          Students: "{{student_total}}"
          short_name: "snort"
          username: '{{ec2_info["rhel7"]["username"]}}'
          launch_time: "{{item.1.launch_time}}"
          guid: {{ ec2_name_prefix }}"
      with_indexed_items:
        - "{{ snort_output.instances }}"
      async: "{{ async_timeout_seconds }}"
      poll: 0
      register: ensure_tags_snort_async
      when: snort_output['instance_ids'] is not none

    - name: Ensure tags are present for attack simulation node
      ec2_tag:
        region: "{{ ec2_region }}"
        resource: "{{item[1]['id']}}"
        state: present
        tags:
          Name: "{{ ec2_name_prefix }}-student{{item[0] + 1}}-attacker"
          Workshop_attacker: "{{ec2_name_prefix}}-attacker"
          Workshop: "{{ec2_name_prefix}}"
          Index: "{{ item[0] }}"
          Student: "student{{item[0] + 1}}"
          AWS_USERNAME: "{{ aws_user }}"
          Info: "AWS_USERNAME that provisioned this-> {{ aws_user }}"
          Linklight: "This was provisioned through the linklight provisioner"
          Students: "{{student_total}}"
          short_name: "attacker"
          username: '{{ec2_info["rhel7"]["username"]}}'
          launch_time: "{{item.1.launch_time}}"
          guid: {{ ec2_name_prefix }}"
      with_indexed_items:
        - "{{ attacker_output.instances }}"
      async: "{{ async_timeout_seconds }}"
      poll: 0
      register: ensure_tags_attacker_async
      when: attacker_output['instance_ids'] is not none

    ############## Check Point CloudGuard IaaS Security Management ##############
    - name: Ensure tags are present for Check Point CloudGuard Security Management node (SECURITY MODE)
      ec2_tag:
        region: "{{ ec2_region }}"
        resource: "{{item[1]['id']}}"
        state: present
        tags:
          Name: "{{ ec2_name_prefix }}-student{{item[0] + 1}}-checkpoint_mgmt"
          Workshop_checkpoint_mgmt: "{{ec2_name_prefix}}-checkpoint"
          Workshop: "{{ec2_name_prefix}}"
          Index: "{{ item[0] }}"
          Student: "student{{item[0] + 1}}"
          AWS_USERNAME: "{{ aws_user }}"
          Info: "AWS_USERNAME that provisioned this-> {{ aws_user }}"
          Linklight: "This was provisioned through the linklight provisioner"
          Students: "{{student_total}}"
          short_name: "checkpoint_mgmt"
          username: "{{ec2_info.checkpoint_mgmt.username}}"
          launch_time: "{{item.1.launch_time}}"
          guid: {{ ec2_name_prefix }}"
      with_indexed_items:
        - "{{ checkpoint_mgmt_output.instances }}"
      async: "{{ async_timeout_seconds }}"
      poll: 0
      register: ensure_tags_checkpoint_mgmt_async
      when: checkpoint_mgmt_output.instance_ids is not none

    ############## Windows Workstation ##############

    - name: Ensure tags are present for Windows Workstation (SECURITY MODE)
      ec2_tag:
        region: "{{ ec2_region }}"
        resource: "{{item[1]['id']}}"
        state: present
        tags:
          Name: "{{ ec2_name_prefix }}-student{{item[0] + 1}}-windows_ws"
          Workshop_windows: "{{ec2_name_prefix}}-windows"
          Workshop: "{{ec2_name_prefix}}"
          Index: "{{ item[0] }}"
          Student: "student{{item[0] + 1}}"
          AWS_USERNAME: "{{ aws_user }}"
          Info: "AWS_USERNAME that provisioned this-> {{ aws_user }}"
          Linklight: "This was provisioned through the linklight provisioner"
          Students: "{{student_total}}"
          short_name: "windows_ws"
          username: "{{ec2_info.windows_ws.username}}"
          launch_time: "{{item.1.launch_time}}"
      with_indexed_items:
        - "{{ windows_ws_output.instances }}"
      async: "{{ async_timeout_seconds }}"
      poll: 0
      register: ensure_tags_windows_async
      when: windows_ws_output.instance_ids is not none

    - name: Wait for async tag creation to complete (instance creation)
      async_status:
        jid: "{{ item['ansible_job_id'] }}"
      register: wait_for_ec2_tag_creation
      until: wait_for_ec2_tag_creation.finished
      retries: "{{ async_wait_for_retries }}"
      when: "'ansible_job_id' in item"
      loop: >
        {{ ('results' in ensure_tags_siem_async) | ternary(ensure_tags_siem_async['results'], []) }}
        + {{ ('results' in ensure_tags_snort_async) | ternary(ensure_tags_snort_async['results'], []) }}
        + {{ ('results' in ensure_tags_attacker_async) | ternary(ensure_tags_attacker_async['results'], []) }}
        + {{ ('results' in ensure_tags_checkpoint_mgmt_async) | ternary(ensure_tags_checkpoint_mgmt_async['results'], []) }}
        + {{ ('results' in ensure_tags_windows_async) | ternary(ensure_tags_windows_async['results'], []) }}

- name: Create EC2 Subnet2 ENI - SECURITY MODE
  block:
    - name: Create Subnet2 ENI async attacker (SECURITY MODE)
      ec2_eni:
        instance_id: '{{ item[1] }}'
        subnet_id: '{{ ec2_vpc_subnet2_id }}'
        state: present
        region: '{{ ec2_region }}'
        delete_on_termination: true
        attached: true
        device_index: 1
      with_indexed_items:
        - '{{ attacker_output["instance_ids"] }}'
      async: "{{ async_timeout_seconds }}"
      poll: 0
      register: ec2_subnet2_eni_attacker_async
      when: attacker_output['instance_ids'] is not none

    - name: Create Subnet2 ENI async snort (SECURITY MODE)
      ec2_eni:
        instance_id: '{{ item[1] }}'
        subnet_id: '{{ ec2_vpc_subnet2_id }}'
        state: present
        region: '{{ ec2_region }}'
        delete_on_termination: true
        attached: true
        device_index: 1
      with_indexed_items:
        - '{{ snort_output["instance_ids"] }}'
      async: "{{ async_timeout_seconds }}"
      poll: 0
      register: ec2_subnet2_eni_snort_async
      when: snort_output['instance_ids'] is not none

    - name: Wait for async 2nd net iface creation to complete (attacker)
      async_status:
        jid: "{{ item['ansible_job_id'] }}"
      register: wait_eni2_creation_attacker
      when: "'ansible_job_id' in item"
      until: wait_eni2_creation_attacker.finished
      retries: "{{ async_wait_for_retries }}"
      loop: "{{ ('results' in ec2_subnet2_eni_attacker_async) | ternary(ec2_subnet2_eni_attacker_async['results'], []) }}"

    - name: Wait for async 2nd net iface creation to complete (snort)
      async_status:
        jid: "{{ item['ansible_job_id'] }}"
      register: wait_eni2_creation_snort
      when: "'ansible_job_id' in item"
      until: wait_eni2_creation_snort.finished
      retries: "{{ async_wait_for_retries }}"
      loop: "{{ ('results' in ec2_subnet2_eni_snort_async) | ternary(ec2_subnet2_eni_snort_async['results'], []) }}"

    - name: Ensure Subnet2 ENI Tags async attacker (SECURITY MODE)
      ec2_tag:
        region: "{{ ec2_region }}"
        resource: "{{ item[1]['interface']['id'] }}"
        state: present
        tags:
          Name: "{{ ec2_name_prefix }}-student{{item[0] + 1}}-attacker-eni2"
          Username: "{{ aws_user }}"
          Info: "Username that provisioned this-> {{ aws_user }}"
          Linklight: "This was provisioned through the linklight provisioner"
          Students: "{{student_total}}"
          Subnet: '{{ ec2_name_prefix }}-subnet2'
          Workshop: "{{ec2_name_prefix}}"
      when: "(item|length|int > 1) and ('interface' in item[1])"
      with_indexed_items:
        - "{{ ('results' in wait_eni2_creation_attacker) | ternary(wait_eni2_creation_attacker['results'],[]) }}"
      async: "{{ async_timeout_seconds }}"
      poll: 0
      register: ec2_subnet2_eni_tags_attacker_async

    - name: Ensure Subnet2 ENI Tags async snort (SECURITY MODE)
      ec2_tag:
        region: "{{ ec2_region }}"
        resource: "{{ item[1]['interface']['id'] }}"
        state: present
        tags:
          Name: "{{ ec2_name_prefix }}-student{{item[0] + 1}}-snort-eni2"
          Username: "{{ aws_user }}"
          Info: "Username that provisioned this-> {{ aws_user }}"
          Linklight: "This was provisioned through the linklight provisioner"
          Students: "{{student_total}}"
          Subnet: '{{ ec2_name_prefix }}-subnet2'
          Workshop: "{{ec2_name_prefix}}"
      when: "(item|length|int > 1) and ('interface' in item[1])"
      with_indexed_items:
        - "{{ ('results' in wait_eni2_creation_snort) | ternary(wait_eni2_creation_snort['results'], []) }}"
      async: "{{ async_timeout_seconds }}"
      poll: 0
      register: ec2_subnet2_eni_tags_snort_async

    - name: Wait for async tag creation to complete (subnet2)
      async_status:
        jid: "{{ item['ansible_job_id'] }}"
      register: wait_for_ec2_tag_creation
      when: "'ansible_job_id' in item"
      until: wait_for_ec2_tag_creation.finished
      retries: "{{ async_wait_for_retries }}"
      loop: >
        {{ ('results' in ec2_subnet2_eni_tags_attacker_async) | ternary(ec2_subnet2_eni_tags_attacker_async['results'], []) }}
        + {{ ('results' in ec2_subnet2_eni_snort_async) | ternary(ec2_subnet2_eni_snort_async['results'], []) }}


###############################################################################
# The CheckPoint GW
#
# This AWS Appliance Image requires all Elastic Network Interfaces (ENIs) to be
# present at instance creation time because there does not appear to be
# a post-instantiation way to add it because the CPGW does not feature
# a standard GNU userspace but instead an embedded linux style setup with
# limited availability to modify the instance after creation (in testing we
# found that even rebooting the instance with new ENIs attached did not cause
# them to be added.
- name: Create EC2 Check Point GW with ENI bookkeeping- SECURITY MODE
  block:
    ###########################################################################
    # BEGIN ENI / EIP creation and book keeping
    #
    # These are interleaved on purpose in some places so that creation and wait
    # tasks can be running in parallel and take advantage of the async
    # operations.
    #
    - name: Create Subnet1 ENI async checkpoint_gw (SECURITY MODE)
      ec2_eni:
        subnet_id: '{{ ec2_vpc_subnet_id }}'
        security_groups:
          - '{{ ec2_security_group }}'
        state: present
        region: '{{ ec2_region }}'
        delete_on_termination: true
      loop: '{{ range(0, student_total) | list }}'
      async: "{{ async_timeout_seconds }}"
      poll: 0
      register: ec2_subnet1_eni_checkpoint_gw_async

    - name: Create Subnet2 ENI async checkpoint_gw (SECURITY MODE)
      ec2_eni:
        subnet_id: '{{ ec2_vpc_subnet2_id }}'
        state: present
        region: '{{ ec2_region }}'
        delete_on_termination: true
      loop: '{{ range(0, student_total) | list }}'
      async: "{{ async_timeout_seconds }}"
      poll: 0
      register: ec2_subnet2_eni_checkpoint_gw_async

    - name: Wait for async 1st net iface creation to complete (checkpoint_gw)
      async_status:
        jid: "{{ item['ansible_job_id'] }}"
      register: wait_eni1_creation_checkpoint_gw
      when: "'ansible_job_id' in item"
      until: wait_eni1_creation_checkpoint_gw.finished
      retries: "{{ async_wait_for_retries }}"
      loop: "{{ ('results' in ec2_subnet1_eni_checkpoint_gw_async) | ternary(ec2_subnet1_eni_checkpoint_gw_async['results'], []) }}"

    - name: Create EIP async for checkpoint_gw Subnet1 ENI (SECURITY MODE)
      ec2_eip:
        in_vpc: true
        region: "{{ ec2_region }}"
        device_id: "{{ item['interface']['id'] }}"
        release_on_disassociation: true
      loop: "{{ wait_eni1_creation_checkpoint_gw['results'] }}"
      async: "{{ async_timeout_seconds }}"
      poll: 0
      register: ec2_subnet1_eip_checkpoint_gw_async

    - name: Wait for async 2nd net iface creation to complete (checkpoint_gw)
      async_status:
        jid: "{{ item['ansible_job_id'] }}"
      register: wait_eni2_creation_checkpoint_gw
      when: "'ansible_job_id' in item"
      until: wait_eni2_creation_checkpoint_gw.finished
      retries: "{{ async_wait_for_retries }}"
      loop: "{{ ('results' in ec2_subnet2_eni_checkpoint_gw_async) | ternary(ec2_subnet2_eni_checkpoint_gw_async['results'], []) }}"

    - name: Wait for async create EIP async for checkpoint_gw Subnet1 ENI (checkpoint_gw)
      async_status:
        jid: "{{ item['ansible_job_id'] }}"
      register: wait_subnet1_eip_creation_checkpoint_gw
      when: "'ansible_job_id' in item"
      until: wait_subnet1_eip_creation_checkpoint_gw.finished
      retries: "{{ async_wait_for_retries }}"
      loop: "{{ ('results' in ec2_subnet1_eip_checkpoint_gw_async) | ternary(ec2_subnet1_eip_checkpoint_gw_async['results'], []) }}"

    - name: Ensure Subnet1 EIP Tags async checkpoint_gw (SECURITY MODE)
      ec2_tag:
        region: "{{ ec2_region }}"
        resource: "{{ item[1]['allocation_id'] }}"
        state: present
        tags:
          Name: "{{ ec2_name_prefix }}-student{{item[0] + 1}}-checkpoint_gw-eip1"
          Username: "{{ aws_user }}"
          Info: "Username that provisioned this-> {{ aws_user }}"
          Linklight: "This was provisioned through the linklight provisioner"
          Students: "{{student_total}}"
          Subnet: '{{ ec2_name_prefix }}-subnet1'
          Workshop: "{{ec2_name_prefix}}"
          VPC: "{{ec2_name_prefix}}"
      when: "(item|length|int > 1) and ('allocation_id' in item[1])"
      with_indexed_items:
        - "{{ ('results' in wait_subnet1_eip_creation_checkpoint_gw) | ternary(wait_subnet1_eip_creation_checkpoint_gw['results'], []) }}"
      async: "{{ async_timeout_seconds }}"
      poll: 0
      register: ec2_subnet1_eni_tags_checkpoint_gw_async

    - name: Ensure Subnet1 ENI Tags async checkpoint_gw (SECURITY MODE)
      ec2_tag:
        region: "{{ ec2_region }}"
        resource: "{{ item[1]['interface']['id'] }}"
        state: present
        tags:
          Name: "{{ ec2_name_prefix }}-student{{item[0] + 1}}-checkpoint_gw-eni1"
          Username: "{{ aws_user }}"
          Info: "Username that provisioned this-> {{ aws_user }}"
          Linklight: "This was provisioned through the linklight provisioner"
          Students: "{{student_total}}"
          Subnet: '{{ ec2_name_prefix }}-subnet1'
          Workshop: "{{ec2_name_prefix}}"
      when: "(item|length|int > 1) and ('interface' in item[1])"
      with_indexed_items:
        - "{{ ('results' in wait_eni1_creation_checkpoint_gw) | ternary(wait_eni1_creation_checkpoint_gw['results'], []) }}"
      async: "{{ async_timeout_seconds }}"
      poll: 0
      register: ec2_subnet1_eni_tags_checkpoint_gw_async

    - name: Ensure Subnet2 ENI Tags async checkpoint_gw (SECURITY MODE)
      ec2_tag:
        region: "{{ ec2_region }}"
        resource: "{{ item[1]['interface']['id'] }}"
        state: present
        tags:
          Name: "{{ ec2_name_prefix }}-student{{item[0] + 1}}-checkpoint_gw-eni2"
          Username: "{{ aws_user }}"
          Info: "Username that provisioned this-> {{ aws_user }}"
          Linklight: "This was provisioned through the linklight provisioner"
          Students: "{{student_total}}"
          Subnet: '{{ ec2_name_prefix }}-subnet2'
          Workshop: "{{ec2_name_prefix}}"
      when: "(item|length|int > 1) and ('interface' in item[1])"
      with_indexed_items:
        - "{{ ('results' in wait_eni2_creation_checkpoint_gw) | ternary(wait_eni2_creation_checkpoint_gw['results'], []) }}"
      async: "{{ async_timeout_seconds }}"
      poll: 0
      register: ec2_subnet2_eni_tags_checkpoint_gw_async

    - name: Wait for async tag creation to complete (CheckPoint GW ENI1)
      async_status:
        jid: "{{ item['ansible_job_id'] }}"
      register: wait_for_checkpoint_eni1_tag_creation
      when: "'ansible_job_id' in item"
      until: wait_for_checkpoint_eni1_tag_creation.finished
      retries: "{{ async_wait_for_retries }}"
      loop: "{{ ('results' in ec2_subnet1_eni_checkpoint_gw_async) | ternary(ec2_subnet1_eni_checkpoint_gw_async['results'], []) }}"

    - name: Wait for async tag creation to complete (CheckPoint GW ENI2)
      async_status:
        jid: "{{ item['ansible_job_id'] }}"
      register: wait_for_checkpoint_eni2_tag_creation
      when: "'ansible_job_id' in item"
      until: wait_for_checkpoint_eni2_tag_creation.finished
      retries: "{{ async_wait_for_retries }}"
      loop: "{{ ('results' in ec2_subnet2_eni_checkpoint_gw_async) | ternary(ec2_subnet2_eni_checkpoint_gw_async['results'], []) }}"
    #
    # END ENI / EIP creation and book keeping
    ###########################################################################

    - name: Create EC2 instances for Check Point CloudGuard Gateway
      ec2:
        key_name: "{{ ec2_name_prefix }}-key"
        instance_type: "{{ec2_info.checkpoint_gw.size }}"
        image: "{{ec2_info.checkpoint_gw.ami.image_id}}"
        region: "{{ ec2_region }}"
        user_data: "{{ lookup('template', 'gaia-ftw-user-data.sh.j2') }}"
        wait: "{{ ec2_wait }}"
        network_interfaces:
          - "{{ item[0]['interface']['id'] }}"
          - "{{ item[1]['interface']['id'] }}"
      async: "{{ async_timeout_seconds }}"
      poll: 0
      register: checkpoint_gw_async
      with_together:
        - "{{ wait_eni1_creation_checkpoint_gw['results'] }}"
        - "{{ wait_eni2_creation_checkpoint_gw['results'] }}"

    - name: Wait for async instance creation to complete (checkpoint_gw)
      async_status:
        jid: "{{ item['ansible_job_id'] }}"
      register: wait_for_checkpoint_gw_ec2_instance_creation
      when: "'ansible_job_id' in item"
      until: wait_for_checkpoint_gw_ec2_instance_creation.finished
      retries: "{{ async_wait_for_retries }}"
      loop: "{{checkpoint_gw_async['results']}}"

    - set_fact:
        checkpoint_gw_output: "{{wait_for_checkpoint_gw_ec2_instance_creation['results']}}"

    ############## Check Point CloudGuard IaaS Gateway ##############
    - name: Ensure tags are present for Check Point CloudGuard Gateway node (SECURITY MODE)
      ec2_tag:
        region: "{{ ec2_region }}"
        resource: "{{item[1]['instance_ids'][0]}}"
        state: present
        tags:
          Name: "{{ ec2_name_prefix }}-student{{item[0] + 1}}-checkpoint_gw"
          Workshop_checkpoint_gw: "{{ec2_name_prefix}}-checkpoint"
          Workshop: "{{ec2_name_prefix}}"
          Index: "{{ item[0] }}"
          Student: "student{{item[0] + 1}}"
          AWS_USERNAME: "{{ aws_user }}"
          Info: "AWS_USERNAME that provisioned this-> {{ aws_user }}"
          Linklight: "This was provisioned through the linklight provisioner"
          Students: "{{student_total}}"
          short_name: "checkpoint_gw"
          username: "{{ec2_info.checkpoint_gw.username}}"
      with_indexed_items:
        - "{{ checkpoint_gw_output }}"
      async: "{{ async_timeout_seconds }}"
      poll: 0
      register: ensure_tags_checkpoint_gw_async
      when: checkpoint_gw_output.instance_ids is not none

    - name: Wait for async tag creation to complete (checkpoint_gw)
      async_status:
        jid: "{{ item['ansible_job_id'] }}"
      register: wait_for_ec2_tag_creation
      until: wait_for_ec2_tag_creation.finished
      retries: "{{ async_wait_for_retries }}"
      when: "'ansible_job_id' in item"
      loop: "{{ ('results' in ensure_tags_checkpoint_gw_async) | ternary(ensure_tags_checkpoint_gw_async['results'], []) }}"
