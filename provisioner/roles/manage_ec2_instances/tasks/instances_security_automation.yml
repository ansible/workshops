- name: set node types
  set_fact:
    node1_node: "{{ ec2_lab_node_types['node1'] }}"
    node2_node: "{{ ec2_lab_node_types['node2'] }}"
    node3_node: "{{ ec2_lab_node_types['node3'] }}"
  when: not networking

- name: find ami for node1
  ec2_ami_facts:
    region: "{{ ec2_region }}"
    owners: "{{ ec2_instance_types[node1_node].owners }}"
    filters:
      name: "{{ ec2_instance_types[ansible_node].filter }}"
      architecture: "{{ ec2_instance_types[node1_node].architecture }}"
  register: amis

- name: save ami for node1
  set_fact:
    node1_ami: >
      {{ amis.images | selectattr('name', 'defined') | sort(attribute='creation_date') | last }}

- name: Create EC2 instances for node1
  ec2:
    assign_public_ip: yes
    key_name: "{{ ec2_name_prefix }}-key"
    group: "{{ ec2_security_group }}"
    instance_type: "{{ ec2_instance_types[node1_node].size }}"
    image: "{{ node1_ami.image_id }}"
    region: "{{ ec2_region }}"
    exact_count: "{{ student_total }}"
    count_tag:
      Workshop_node1: "{{ec2_name_prefix}}-node1"
    wait: "{{ ec2_wait }}"
    vpc_subnet_id: "{{ ec2_vpc_subnet_id }}"
    volumes:
      - device_name: /dev/sda1
        volume_type: gp2
        volume_size: "{{ ec2_instance_types[node1_node].disk_space }}"
        delete_on_termination: true
  register: node1_output

- name: Ensure tags are present for node1
  ec2_tag:
    region: "{{ ec2_region }}"
    resource: "{{item.1}}"
    state: present
    tags:
      Name: "{{ ec2_name_prefix }}-student{{item.0 + 1}}-node1"
      Workshop_node1: "{{ec2_name_prefix}}-node1"
      Workshop: "{{ec2_name_prefix}}"
      Index: "{{ item[0] }}"
      Student: "student{{item.0 + 1}}"
      AWS_USERNAME: "{{ linklight_user }}"
      Info: "AWS_USERNAME that provisioned this-> {{ linklight_user }}"
      Linklight: "This was provisioned through the linklight provisioner"
      Students: "{{student_total}}"
      short_name: "node1"
  with_indexed_items:
    - "{{ node1_output.instance_ids }}"
  when: node1_output.instance_ids is not none

- name: find ami for node2
  ec2_ami_facts:
    region: "{{ ec2_region }}"
    owners: "{{ ec2_instance_types[node2_node].owners }}"
    filters:
      name: "{{ ec2_instance_types[ansible_node].filter }}"
      architecture: "{{ ec2_instance_types[node2_node].architecture }}"
  register: amis

- name: save ami for node2
  set_fact:
    node2_ami: >
      {{ amis.images | selectattr('name', 'defined') | sort(attribute='creation_date') | last }}

- name: Create EC2 instances for node2
  ec2:
    assign_public_ip: yes
    key_name: "{{ ec2_name_prefix }}-key"
    group: "{{ ec2_security_group }}"
    instance_type: "{{ ec2_instance_types[node2_node].size }}"
    image: "{{ node2_ami.image_id }}"
    region: "{{ ec2_region }}"
    exact_count: "{{ student_total }}"
    count_tag:
      Workshop_node2: "{{ec2_name_prefix}}-node2"
    wait: "{{ ec2_wait }}"
    vpc_subnet_id: "{{ ec2_vpc_subnet_id }}"
    volumes:
      - device_name: /dev/sda1
        volume_type: gp2
        volume_size: "{{ ec2_instance_types[node2_node].disk_space }}"
        delete_on_termination: true
  register: node2_output

- name: Ensure tags are present for node2
  ec2_tag:
    region: "{{ ec2_region }}"
    resource: "{{item.1}}"
    state: present
    tags:
      Name: "{{ ec2_name_prefix }}-student{{item.0 + 1}}-node2"
      Workshop_node2: "{{ec2_name_prefix}}-node2"
      Workshop: "{{ec2_name_prefix}}"
      Index: "{{ item[0] }}"
      Student: "student{{item.0 + 1}}"
      AWS_USERNAME: "{{ linklight_user }}"
      Info: "AWS_USERNAME that provisioned this-> {{ linklight_user }}"
      Linklight: "This was provisioned through the linklight provisioner"
      Students: "{{student_total}}"
      short_name: "node2"
  with_indexed_items:
    - "{{ node2_output.instance_ids }}"
  when: node2_output.instance_ids is not none

- name: find ami for node3
  ec2_ami_facts:
    region: "{{ ec2_region }}"
    owners: "{{ ec2_instance_types[node3_node].owners }}"
    filters:
      name: "{{ ec2_instance_types[ansible_node].filter }}"
      architecture: "{{ ec2_instance_types[node3_node].architecture }}"
  register: amis

- name: save ami for node3
  set_fact:
    node3_ami: >
      {{ amis.images | selectattr('name', 'defined') | sort(attribute='creation_date') | last }}

- name: Create EC2 instances for node3
  ec2:
    assign_public_ip: yes
    key_name: "{{ ec2_name_prefix }}-key"
    group: "{{ ec2_security_group }}"
    instance_type: "{{ ec2_instance_types[node3_node].size }}"
    image: "{{ node3_ami.image_id }}"
    region: "{{ ec2_region }}"
    exact_count: "{{ student_total }}"
    count_tag:
      Workshop_node3: "{{ec2_name_prefix}}-node3"
    wait: "{{ ec2_wait }}"
    vpc_subnet_id: "{{ ec2_vpc_subnet_id }}"
    volumes:
      - device_name: /dev/sda1
        volume_type: gp2
        volume_size: "{{ ec2_instance_types[node3_node].disk_space }}"
        delete_on_termination: true
  register: node3_output

- name: Ensure tags are present for node3
  ec2_tag:
    region: "{{ ec2_region }}"
    resource: "{{item.1}}"
    state: present
    tags:
      Name: "{{ ec2_name_prefix }}-student{{item.0 + 1}}-node3"
      Workshop_node3: "{{ec2_name_prefix}}-node3"
      Workshop: "{{ec2_name_prefix}}"
      Index: "{{ item[0] }}"
      Student: "student{{item.0 + 1}}"
      AWS_USERNAME: "{{ linklight_user }}"
      Info: "AWS_USERNAME that provisioned this-> {{ linklight_user }}"
      Linklight: "This was provisioned through the linklight provisioner"
      Students: "{{student_total}}"
      short_name: "node3"
  with_indexed_items:
    - "{{ node3_output.instance_ids }}"
  when: node3_output.instance_ids is not none
