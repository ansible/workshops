- name: Create AWS VPC {{ ec2_name_prefix }}-vpc
  ec2_vpc_net:
    name: "{{ ec2_name_prefix }}-vpc"
    cidr_block: "{{ec2_subnet}}"
    region: "{{ ec2_region }}"
    tags:
      Username: "{{ linklight_user }}"
      Info: "Username that provisioned this-> {{ linklight_user }}"
      Linklight: "This was provisioned through the linklight provisioner"
      Students: "{{student_total}}"
  register: create_vpc
  when: ec2_vpc_id is undefined
  until: create_vpc is not failed
  retries: 5

- name: Create AWS VPC {{ ec2_name_prefix }}-vpc2 (NETWORKING MODE)
  ec2_vpc_net:
    name: "{{ ec2_name_prefix }}-vpc2"
    cidr_block: "{{ ec2_subnet2 }}"
    region: "{{ ec2_region }}"
    tags:
      Username: "{{ linklight_user }}"
      Info: "Username that provisioned this-> {{ linklight_user }}"
      Linklight: "This was provisioned through the linklight provisioner"
      Students: "{{student_total}}"
  register: create_vpc2
  when:
    - ec2_vpc_id2 is undefined
    - networking
  until: create_vpc2 is not failed
  retries: 5

- name: Create EC2 security group for VPC named {{ ec2_name_prefix }}-vpc
  ec2_group:
    name: "{{ ec2_name_prefix }}-insecure_all"
    description: all ports open
    region: "{{ ec2_region }}"
    vpc_id: "{{create_vpc.vpc.id}}"
    tags:
      Username: "{{ linklight_user }}"
      Info: "Username that provisioned this-> {{ linklight_user }}"
      Linklight: "This was provisioned through the linklight provisioner"
      Students: "{{student_total}}"
    rules:
      - proto: 47
        to_port: -1
        from_port: -1
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        to_port: 443
        from_port: 443
        cidr_ip: 0.0.0.0/0
      - proto: icmp
        to_port: -1
        from_port: -1
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        to_port: 80
        from_port: 80
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        to_port: 22
        from_port: 22
        cidr_ip: 0.0.0.0/0
    rules_egress:
      - proto: all
        cidr_ip: 0.0.0.0/0
  when: ec2_vpc_id is undefined and ec2_exact_count >= 1

- name: Create EC2 security group 2 for VPC named {{ ec2_name_prefix }}-vpc (NETWORKING MODE)
  ec2_group:
    name: "{{ ec2_name_prefix }}-insecure_all2"
    description: all ports open
    region: "{{ ec2_region }}"
    vpc_id: "{{create_vpc2.vpc.id}}"
    tags:
      Username: "{{ linklight_user }}"
      Info: "Username that provisioned this-> {{ linklight_user }}"
      Linklight: "This was provisioned through the linklight provisioner"
      Students: "{{student_total}}"
    rules:
      - proto: 47
        to_port: -1
        from_port: -1
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        to_port: 443
        from_port: 443
        cidr_ip: 0.0.0.0/0
      - proto: icmp
        to_port: -1
        from_port: -1
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        to_port: 80
        from_port: 80
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        to_port: 22
        from_port: 22
        cidr_ip: 0.0.0.0/0
    rules_egress:
      - proto: all
        cidr_ip: 0.0.0.0/0
  when:
    - networking
    - ec2_vpc_id2 is undefined
    - ec2_exact_count >= 1

- name: Create subnet for {{ ec2_name_prefix }}-vpc
  ec2_vpc_subnet:
    region: "{{ ec2_region }}"
    az: "{{ ec2_az }}"
    vpc_id: "{{ create_vpc.vpc.id }}"
    cidr: "{{ ec2_subnet }}"
    wait_timeout: 600
    resource_tags:
      Name: "{{ ec2_name_prefix }}-subnet"
      Username: "{{ linklight_user }}"
      Info: "Username that provisioned this-> {{ linklight_user }}"
      Linklight: "This was provisioned through the linklight provisioner"
      Students: "{{student_total}}"
  register: create_subnet
  when: ec2_vpc_id is undefined
  until: create_subnet is not failed
  retries: 15

- name: Create subnet for {{ ec2_name_prefix }}-vpc2 (NETWORKING MODE)
  ec2_vpc_subnet:
    region: "{{ ec2_region }}"
    az: "{{ ec2_az }}"
    vpc_id: "{{create_vpc2.vpc.id}}"
    cidr: "{{ec2_subnet2}}"
    resource_tags:
      Name: "{{ ec2_name_prefix }}-subnet2"
      Username: "{{ linklight_user }}"
      Info: "Username that provisioned this-> {{ linklight_user }}"
      Linklight: "This was provisioned through the linklight provisioner"
      Students: "{{student_total}}"
  register: create_subnet2
  until: create_subnet2 is not failed
  retries: 15
  when:
    - ec2_vpc_id2 is undefined
    - networking

- name: vpc internet gateway is present for {{ create_vpc.vpc.id }}
  ec2_vpc_igw:
    region: "{{ ec2_region }}"
    vpc_id: "{{ create_vpc.vpc.id }}"
    tags:
      Username: "{{ linklight_user }}"
      Info: "Username that provisioned this-> {{ linklight_user }}"
      Linklight: "This was provisioned through the linklight provisioner"
      Students: "Total {{student_total}}"
  register: igw
  when: ec2_vpc_id is undefined

- name: vpc internet gateway is present for {{ create_vpc2.vpc.id }} (NETWORKING MODE)
  ec2_vpc_igw:
    region: "{{ ec2_region }}"
    vpc_id: "{{ create_vpc2.vpc.id }}"
    tags:
      Username: "{{ linklight_user }}"
      Info: "Username that provisioned this-> {{ linklight_user }}"
      Linklight: "This was provisioned through the linklight provisioner"
      Students: "Total {{student_total}}"
  register: igw2
  when:
    - networking
    - ec2_vpc_id2 is undefined

- name: vpc public subnet route table is present for {{ create_vpc.vpc.id }}
  ec2_vpc_route_table:
    region: "{{ ec2_region }}"
    vpc_id: "{{ create_vpc.vpc.id }}"
    subnets:
      - "{{ create_subnet.subnet.id }}"
    routes:
      - dest: 0.0.0.0/0
        gateway_id: "{{ igw.gateway_id }}"
    tags:
      Username: "{{ linklight_user }}"
      Info: "Username that provisioned this-> {{ linklight_user }}"
      Linklight: "This was provisioned through the linklight provisioner"
      Students: "{{student_total}}"
  register: routetable
  until: routetable is not failed
  retries: 5
  when: ec2_vpc_id is undefined

- name: vpc public subnet route table is present for {{ create_vpc2.vpc.id }} (NETWORKING MODE)
  ec2_vpc_route_table:
    region: "{{ ec2_region }}"
    vpc_id: "{{ create_vpc2.vpc.id }}"
    subnets:
      - "{{ create_subnet2.subnet.id }}"
    routes:
      - dest: 0.0.0.0/0
        gateway_id: "{{ igw2.gateway_id }}"
    tags:
      Username: "{{ linklight_user }}"
      Info: "Username that provisioned this-> {{ linklight_user }}"
      Linklight: "This was provisioned through the linklight provisioner"
      Students: "{{student_total}}"
  register: routetablenetworking
  until: routetablenetworking is not failed
  retries: 5
  when:
    - networking
    - ec2_vpc_id2 is undefined

- name: set variables for instance creation dynamically since VPC was not supplied by user
  set_fact:
    ec2_vpc_id: "{{ create_vpc.vpc.id }}"
    ec2_security_group: "{{ ec2_name_prefix }}-insecure_all"
    ec2_vpc_subnet_id: "{{ create_subnet.subnet.id }}"
  when: ec2_vpc_id is undefined

- name: set variables for instance creation dynamically since VPC was not supplied by user (NETWORKING MODE)
  set_fact:
    ec2_vpc_id2: "{{ create_vpc2.vpc.id }}"
    ec2_vpc_subnet_id2: "{{ create_subnet2.subnet.id }}"
    ec2_security_group2: "{{ ec2_name_prefix }}-insecure_all2"
  when:
    - networking
    - ec2_vpc_id2 is undefined

- name: Create ssh key pair for workshop {{ ec2_name_prefix }}
  ec2_key:
    name: "{{ ec2_name_prefix }}-key"
    region: "{{ ec2_region }}"
  register: create_key

# - name: Ensures /tmp dir exists
#   file: path=/tmp state=directory

- name: save private key
  copy:
    content: "{{ create_key.key.private_key }}"
    dest: "{{ playbook_dir }}/aws-private.pem"
    mode: '0400'
  when: create_key.changed

- name: debugging all variables for ec2 instance creation VPC-1
  debug:
    msg:
      - "ec2_name_prefix: {{ec2_name_prefix}}"
      - "ec2_vpc_id: {{ ec2_vpc_id }}"
      - "{{ ec2_name_prefix }}-key: {{ ec2_name_prefix }}-key"
      - "ec2_security_group: {{ ec2_security_group }}"
      - "ec2_vpc_subnet_id: {{ ec2_vpc_subnet_id }}"

- name: debugging all variables for ec2 instance creation VPC-2 (NETWORKING MODE)
  debug:
    msg:
      - "ec2_name_prefix: {{ec2_name_prefix}}"
      - "ec2_vpc_id2: {{ ec2_vpc_id2 }}"
      - "ec2_vpc_subnet_id2: {{ ec2_vpc_subnet_id2 }}"
  when: networking

- name: set node types (NETWORKING MODE)
  set_fact:
    ansible_node: "{{ ec2_lab_node_types_networking['ansible'] }}"
    rtr1_node: "{{ ec2_lab_node_types_networking['rtr1'] }}"
    rtr2_node: "{{ ec2_lab_node_types_networking['rtr2'] }}"
    host1_node: "{{ ec2_lab_node_types_networking['host1'] }}"
  when: networking

- name: set node types
  set_fact:
    ansible_node: "{{ ec2_lab_node_types['ansible'] }}"
    node1_node: "{{ ec2_lab_node_types['node1'] }}"
    node2_node: "{{ ec2_lab_node_types['node2'] }}"
    node3_node: "{{ ec2_lab_node_types['node3'] }}"
  when: not networking

- name: find ami for ansible control node
  ec2_ami_facts:
    region: "{{ ec2_region }}"
    owners: "{{ ec2_instance_types[ansible_node].owners }}"
    filters:
      name: "{{ ec2_instance_types[ansible_node].filter }}"
      architecture: "{{ ec2_instance_types[ansible_node].architecture }}"
  register: amis

- name: save ami for ansible control node
  set_fact:
    ansible_control_node_ami: >
      {{ amis.images | selectattr('name', 'defined') | sort(attribute='creation_date') | last }}

- name: Create EC2 instances for ansible node (control node)
  ec2:
    assign_public_ip: yes
    key_name: "{{ ec2_name_prefix }}-key"
    group: "{{ ec2_security_group }}"
    instance_type: "{{ ec2_instance_types[ansible_node].size }}"
    image: "{{ ansible_control_node_ami.image_id }}"
    region: "{{ ec2_region }}"
    exact_count: "{{ student_total }}"
    count_tag:
      Workshop_ansible: "{{ec2_name_prefix}}-ansible"
    wait: "{{ ec2_wait }}"
    vpc_subnet_id: "{{ ec2_vpc_subnet_id }}"
    volumes:
      - device_name: /dev/sda1
        volume_type: gp2
        volume_size: "{{ ec2_instance_types[ansible_node].disk_space }}"
        delete_on_termination: true
  register: control_output

- name: Ensure tags are present
  ec2_tag:
    region: "{{ ec2_region }}"
    resource: "{{item.1}}"
    state: present
    tags:
      Name: "{{ ec2_name_prefix }}-student{{item.0 + 1}}-ansible"
      Workshop_ansible: "{{ec2_name_prefix}}-ansible"
      Workshop: "{{ec2_name_prefix}}"
      Index: "{{ item[0] }}"
      Student: "student{{item.0 + 1}}"
      Username: "{{ linklight_user }}"
      Info: "Username that provisioned this-> {{ linklight_user }}"
      Linklight: "This was provisioned through the linklight provisioner"
      Students: "{{student_total}}"
  with_indexed_items:
    - "{{ control_output.instance_ids }}"
  when: control_output.instance_ids is not none

- name: find ami for node1
  ec2_ami_facts:
    region: "{{ ec2_region }}"
    owners: "{{ ec2_instance_types[node1_node].owners }}"
    filters:
      name: "{{ ec2_instance_types[ansible_node].filter }}"
      architecture: "{{ ec2_instance_types[node1_node].architecture }}"
  register: amis
  when: not networking

- name: save ami for node1
  set_fact:
    node1_ami: >
      {{ amis.images | selectattr('name', 'defined') | sort(attribute='creation_date') | last }}
  when: not networking

- name: Create EC2 instances for node1
  ec2:
    assign_public_ip: yes
    key_name: "{{ ec2_name_prefix }}-key"
    group: "{{ ec2_security_group }}"
    instance_type: "{{ ec2_instance_types[node1_node].size }}"
    image: "{{ node1_ami.image_id }}"
    region: "{{ ec2_region }}"
    exact_count: "{{ student_total }}"
    count_tag:
      Workshop_node1: "{{ec2_name_prefix}}-node1"
    wait: "{{ ec2_wait }}"
    vpc_subnet_id: "{{ ec2_vpc_subnet_id }}"
    volumes:
      - device_name: /dev/sda1
        volume_type: gp2
        volume_size: "{{ ec2_instance_types[node1_node].disk_space }}"
        delete_on_termination: true
  register: node1_output
  when: not networking

- name: Ensure tags are present for node1
  ec2_tag:
    region: "{{ ec2_region }}"
    resource: "{{item.1}}"
    state: present
    tags:
      Name: "{{ ec2_name_prefix }}-student{{item.0 + 1}}-node1"
      Workshop_node1: "{{ec2_name_prefix}}-node1"
      Workshop: "{{ec2_name_prefix}}"
      Index: "{{ item[0] }}"
      Student: "student{{item.0 + 1}}"
      Username: "{{ linklight_user }}"
      Info: "Username that provisioned this-> {{ linklight_user }}"
      Linklight: "This was provisioned through the linklight provisioner"
      Students: "{{student_total}}"
  with_indexed_items:
    - "{{ node1_output.instance_ids }}"
  when:
    - not networking
    - node1_output.instance_ids is not none

- name: find ami for node2
  ec2_ami_facts:
    region: "{{ ec2_region }}"
    owners: "{{ ec2_instance_types[node2_node].owners }}"
    filters:
      name: "{{ ec2_instance_types[ansible_node].filter }}"
      architecture: "{{ ec2_instance_types[node2_node].architecture }}"
  register: amis
  when: not networking

- name: save ami for node2
  set_fact:
    node2_ami: >
      {{ amis.images | selectattr('name', 'defined') | sort(attribute='creation_date') | last }}
  when: not networking

- name: Create EC2 instances for node2
  ec2:
    assign_public_ip: yes
    key_name: "{{ ec2_name_prefix }}-key"
    group: "{{ ec2_security_group }}"
    instance_type: "{{ ec2_instance_types[node2_node].size }}"
    image: "{{ node2_ami.image_id }}"
    region: "{{ ec2_region }}"
    exact_count: "{{ student_total }}"
    count_tag:
      Workshop_node2: "{{ec2_name_prefix}}-node2"
    wait: "{{ ec2_wait }}"
    vpc_subnet_id: "{{ ec2_vpc_subnet_id }}"
    volumes:
      - device_name: /dev/sda1
        volume_type: gp2
        volume_size: "{{ ec2_instance_types[node2_node].disk_space }}"
        delete_on_termination: true
  register: node2_output
  when: not networking

- name: Ensure tags are present for node2
  ec2_tag:
    region: "{{ ec2_region }}"
    resource: "{{item.1}}"
    state: present
    tags:
      Name: "{{ ec2_name_prefix }}-student{{item.0 + 1}}-node2"
      Workshop_node2: "{{ec2_name_prefix}}-node2"
      Workshop: "{{ec2_name_prefix}}"
      Index: "{{ item[0] }}"
      Student: "student{{item.0 + 1}}"
      Username: "{{ linklight_user }}"
      Info: "Username that provisioned this-> {{ linklight_user }}"
      Linklight: "This was provisioned through the linklight provisioner"
      Students: "{{student_total}}"
  with_indexed_items:
    - "{{ node2_output.instance_ids }}"
  when:
    - not networking
    - node2_output.instance_ids is not none

- name: find ami for node3
  ec2_ami_facts:
    region: "{{ ec2_region }}"
    owners: "{{ ec2_instance_types[node3_node].owners }}"
    filters:
      name: "{{ ec2_instance_types[ansible_node].filter }}"
      architecture: "{{ ec2_instance_types[node3_node].architecture }}"
  register: amis
  when: not networking

- name: save ami for node3
  set_fact:
    node3_ami: >
      {{ amis.images | selectattr('name', 'defined') | sort(attribute='creation_date') | last }}
  when: not networking

- name: Create EC2 instances for node3
  ec2:
    assign_public_ip: yes
    key_name: "{{ ec2_name_prefix }}-key"
    group: "{{ ec2_security_group }}"
    instance_type: "{{ ec2_instance_types[node3_node].size }}"
    image: "{{ node3_ami.image_id }}"
    region: "{{ ec2_region }}"
    exact_count: "{{ student_total }}"
    count_tag:
      Workshop_node3: "{{ec2_name_prefix}}-node3"
    wait: "{{ ec2_wait }}"
    vpc_subnet_id: "{{ ec2_vpc_subnet_id }}"
    volumes:
      - device_name: /dev/sda1
        volume_type: gp2
        volume_size: "{{ ec2_instance_types[node3_node].disk_space }}"
        delete_on_termination: true
  register: node3_output
  when: not networking

- name: Ensure tags are present for node3
  ec2_tag:
    region: "{{ ec2_region }}"
    resource: "{{item.1}}"
    state: present
    tags:
      Name: "{{ ec2_name_prefix }}-student{{item.0 + 1}}-node3"
      Workshop_node3: "{{ec2_name_prefix}}-node3"
      Workshop: "{{ec2_name_prefix}}"
      Index: "{{ item[0] }}"
      Student: "student{{item.0 + 1}}"
      Username: "{{ linklight_user }}"
      Info: "Username that provisioned this-> {{ linklight_user }}"
      Linklight: "This was provisioned through the linklight provisioner"
      Students: "{{student_total}}"
  with_indexed_items:
    - "{{ node3_output.instance_ids }}"
  when:
    - not networking
    - node3_output.instance_ids is not none

- name: find ami for rtr1 (NETWORKING MODE)
  ec2_ami_facts:
    region: "{{ ec2_region }}"
    owners: "{{ ec2_instance_types[rtr1_node].owners }}"
    filters:
      name: "{{ ec2_instance_types[rtr1_node].filter }}"
      architecture: "{{ ec2_instance_types[rtr1_node].architecture }}"
  register: amis
  when: networking

- name: save ami for rtr (NETWORKING MODE)
  set_fact:
    rtr1_ami: >
      {{ amis.images | selectattr('name', 'defined') | sort(attribute='creation_date') | last }}
  when: networking

- name: Create EC2 instances for rtr1 node (NETWORKING MODE)
  ec2:
    assign_public_ip: yes
    key_name: "{{ ec2_name_prefix }}-key"
    group: "{{ ec2_security_group }}"
    instance_type: "{{ ec2_instance_types[rtr1_node].size }}"
    image: "{{ rtr1_ami.image_id }}"
    region: "{{ ec2_region }}"
    exact_count: "{{ student_total }}"
    count_tag:
      Workshop_rtr1: "{{ec2_name_prefix}}-rtr1"
    wait: "{{ ec2_wait }}"
    vpc_subnet_id: "{{ ec2_vpc_subnet_id }}"
  when: networking
  register: rtr1_output

- name: Ensure tags are present for rtr1 node (NETWORKING MODE)
  ec2_tag:
    region: "{{ ec2_region }}"
    resource: "{{item.1}}"
    state: present
    tags:
      Name: "{{ ec2_name_prefix }}-student{{item.0 + 1}}-rtr1"
      Workshop_rtr1: "{{ec2_name_prefix}}-rtr1"
      Workshop: "{{ec2_name_prefix}}"
      Index: "{{ item[0] }}"
      Student: "student{{item.0 + 1}}"
      Username: "{{ linklight_user }}"
      Info: "Username that provisioned this-> {{ linklight_user }}"
      Linklight: "This was provisioned through the linklight provisioner"
      Students: "{{student_total}}"
  with_indexed_items:
    - "{{ rtr1_output.instance_ids }}"
  when:
    - networking
    - rtr1_output.instance_ids is not none

- name: find ami for rtr2 (NETWORKING MODE)
  ec2_ami_facts:
    region: "{{ ec2_region }}"
    owners: "{{ ec2_instance_types[rtr2_node].owners }}"
    filters:
      name: "{{ ec2_instance_types[rtr2_node].filter }}"
      architecture: "{{ ec2_instance_types[rtr2_node].architecture }}"
  register: amis
  when: networking

- name: save ami for rtr2 (NETWORKING MODE)
  set_fact:
    rtr2_ami: >
      {{ amis.images | selectattr('name', 'defined') | sort(attribute='creation_date') | last }}
  when: networking

- name: Create EC2 instances for rtr2 node in VPC-2 (NETWORKING MODE)
  ec2:
    assign_public_ip: yes
    key_name: "{{ ec2_name_prefix }}-key"
    group: "{{ ec2_security_group2 }}"
    instance_type: "{{ ec2_instance_types[rtr2_node].size }}"
    image: "{{ rtr2_ami.image_id }}"
    region: "{{ ec2_region }}"
    exact_count: "{{ student_total }}"
    count_tag:
      Workshop_rtr2: "{{ec2_name_prefix}}-rtr2"
    wait: "{{ ec2_wait }}"
    vpc_subnet_id: "{{ ec2_vpc_subnet_id2 }}"
  when: networking
  register: rtr2_output

- name: Ensure tags are present for rtr2 node (NETWORKING MODE)
  ec2_tag:
    region: "{{ ec2_region }}"
    resource: "{{item.1}}"
    state: present
    tags:
      Name: "{{ ec2_name_prefix }}-student{{item.0 + 1}}-rtr2"
      Workshop_rtr2: "{{ec2_name_prefix}}-rtr2"
      Workshop: "{{ec2_name_prefix}}"
      Index: "{{ item[0] }}"
      Student: "student{{item.0 + 1}}"
      Username: "{{ linklight_user }}"
      Info: "Username that provisioned this-> {{ linklight_user }}"
      Linklight: "This was provisioned through the linklight provisioner"
      Students: "{{student_total}}"
  with_indexed_items:
    - "{{ rtr2_output.instance_ids }}"
  when:
    - networking
    - rtr2_output.instance_ids is not none

- name: find ami for host1 (NETWORKING MODE)
  ec2_ami_facts:
    region: "{{ ec2_region }}"
    owners: "{{ ec2_instance_types[host1_node].owners }}"
    filters:
      name: "{{ ec2_instance_types[host1_node].filter }}"
      architecture: "{{ ec2_instance_types[host1_node].architecture }}"
  register: amis
  when: networking

- name: save ami for rtr2 (NETWORKING MODE)
  set_fact:
    host1_ami: >
      {{ amis.images | selectattr('name', 'defined') | sort(attribute='creation_date') | last }}
  when: networking

- name: Create EC2 instances for host1 node in VPC-2 (NETWORKING MODE)
  ec2:
    assign_public_ip: yes
    key_name: "{{ ec2_name_prefix }}-key"
    group: "{{ ec2_security_group2 }}"
    instance_type: "{{ ec2_instance_types[host1_node].size }}"
    image: "{{ host1_ami.image_id }}"
    region: "{{ ec2_region }}"
    exact_count: "{{ student_total }}"
    count_tag:
      Workshop_host1: "{{ec2_name_prefix}}-host1"
    wait: "{{ ec2_wait }}"
    vpc_subnet_id: "{{ ec2_vpc_subnet_id2 }}"
  when: networking
  register: host1_output

- name: Ensure tags are present for host1 node (NETWORKING MODE)
  ec2_tag:
    region: "{{ ec2_region }}"
    resource: "{{item.1}}"
    state: present
    tags:
      Name: "{{ ec2_name_prefix }}-student{{item.0 + 1}}-host1"
      Workshop_host1: "{{ec2_name_prefix}}-host1"
      Workshop: "{{ec2_name_prefix}}"
      Index: "{{ item[0] }}"
      Student: "student{{item.0 + 1}}"
      Username: "{{ linklight_user }}"
      Info: "Username that provisioned this-> {{ linklight_user }}"
      Linklight: "This was provisioned through the linklight provisioner"
      Students: "{{student_total}}"
  with_indexed_items:
    - "{{ host1_output.instance_ids }}"
  when:
    - networking
    - host1_output.instance_ids is not none

- name: grab all network interfaces for VPC 1
  ec2_eni_facts:
    region: "{{ ec2_region }}"
    filters:
      vpc-id: "{{ec2_vpc_id}}"
  register: eni_facts_1

- name: grab all network interfaces for VPC 2 (NETWORKING MODE)
  ec2_eni_facts:
    region: "{{ ec2_region }}"
    filters:
      vpc-id: "{{ec2_vpc_id2}}"
  register: eni_facts_2
  when: networking

- name: Disable Source/Dest check on instance {{ec2_vpc_id1}}
  ec2_eni:
    eni_id: "{{ item['network_interface_id'] }}"
    region: "{{ ec2_region }}"
    source_dest_check: false
  with_items:
    - "{{eni_facts_1['network_interfaces']}}"
    - "{{eni_facts_2['network_interfaces']}}"
  when: networking

- name: Include tasks only needed when creating instances
  include_tasks: create.yml
  when: ec2_exact_count >= 1
