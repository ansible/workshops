---
- name: REMOVE SPLUNK DNS
  block:
    - name: GRAB ZONE ID
      route53_zone:
        zone: "{{workshop_dns_zone}}"
      register: AWSINFO

    - name: GRAB ROUTE53 INFORMATION
      route53_facts:
        type: A
        query: record_sets
        hosted_zone_id: "{{AWSINFO.zone_id}}"
        start_record_name: "student1.{{ec2_name_prefix|lower}}.{{workshop_dns_zone}}"
        max_items: "{{student_total}}"
      register: record_sets

    - name: DELETE DNS ENTRIES FOR EACH STUDENT
      become: false
      route53:
        state: "{{ s3_state }}"
        zone: "{{workshop_dns_zone}}"
        record: "student{{item}}.{{ec2_name_prefix|lower}}.{{workshop_dns_zone}}"
        type: A
        value: "{{ (records | first | first)['Value'] }}"
      loop: "{{ range(1, student_total + 1)|list }}"
      vars:
        records: '{{record_sets.ResourceRecordSets | selectattr("Name", "match", "student" + item|string + "." + ec2_name_prefix|lower + "." + workshop_dns_zone) | map(attribute="ResourceRecords") | list }}'
      when: records
  when: teardown

- name: ADD SPLUNK DNS
  block:
    - name: CHECK TO SEE IF SPLUNK SSL CERT ALREADY APPLIED
      uri:
        url: https://localhost/api/v2/ping/
        method: GET
        user: admin
        password: ansible
        validate_certs: true
        force_basic_auth: true
      register: check_cert
      ignore_errors: true
    - name: DNS FOR SPLUNK
      become: false
      route53:
        state: "{{ s3_state }}"
        zone: "{{workshop_dns_zone}}"
        record: "{{username}}-siem.{{ec2_name_prefix|lower}}.{{workshop_dns_zone}}"
        type: A
        overwrite: true
        value: "{{ansible_host}}"
      delegate_to: localhost
      when:
        - check_cert is failed
  when:
    - not teardown

# tasks file for splunk_enterprise
- name: "install epel"
  yum:
    name: 'https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm'
    state: present

- name: "install pre-reqs"
  package:
    name:
      - rsync
      - tar
      - procps-ng
      - wget
      - net-tools
      - curl
      - sudo
      - iputils
      - bind-utils
      - ansible
      - python-requests
      - git
    state: present

- name: ensure groups exist
  group:
    name: "{{ item }}"
    state: present
  loop:
    - 'ansible'
    - 'splunk'
- name: ensure users exist
  user:
    name: "{{ item['name'] }}"
    state: present
    group: "{{ item['group'] }}"
  loop:
    - {name: 'ansible', group: 'ansible'}
    - {name: 'splunk', group: 'splunk'}

- name: ensure hardcoded splunk-ansible container dir exists
  file:
    path: /opt/splunk/
    state: directory

- name: INSTALL CERTBOT
  yum:
    name: certbot

# If this fails check out status of certbot: https://letsencrypt.status.io/
- name: ISSUE CERT
  shell: "certbot certonly --standalone -d {{username}}-siem.{{ec2_name_prefix|lower}}.{{workshop_dns_zone}} --email ansible-security-automation@redhat.com --noninteractive --agree-tos"
  register: issue_cert
  until: issue_cert is not failed
  retries: 5
  ignore_errors: true

- name: APPEND LETS ENCRYPT FAILED
  set_fact:
    dns_information: |
      - The Lets Encrypt certbot failed, please check https://letsencrypt.status.io/ to make sure the service is running
  run_once: true
  delegate_to: localhost
  delegate_facts: true
  when: issue_cert is failed

- name: MAKE SPLUNK PKI DIR
  file:
    path: /etc/pki/splunk
    state: directory
    mode: 0755

- name: MOVE SSL KEY
  copy:
    remote_src: true
    src: "/etc/letsencrypt/live/{{username}}-siem.{{ec2_name_prefix|lower}}.{{workshop_dns_zone}}/privkey.pem"
    dest: /etc/pki/splunk/splunk.key
  when: issue_cert is not failed

- name: GRAB SPECIFIC SSL CERT
  slurp:
    src: "/etc/letsencrypt/live/{{username}}-siem.{{ec2_name_prefix|lower}}.{{workshop_dns_zone}}/cert.pem"
  register: intermediate_cert

- name: COMBINE SPECIFIC AND INTERMEDIATE CERT
  template:
    src: combined_cert.j2
    dest: /etc/pki/splunk/splunk.cert

- name: Download Splunk from S3
  get_url:
    url: 'https://s3.amazonaws.com/linklight.securityautomation/splunk-7.2.6-c0bf0f679ce9-Linux-x86_64.tgz'
    dest: /tmp/splunk.tgz

- name: Git clone splunk-ansible
  git:
    repo: 'https://github.com/splunk/splunk-ansible'
    version: '7.2.6'
    dest: '/tmp/splunk-ansible'

- name: Copy splunk-ansible Extra Vars
  copy:
    src: splunk_ansible_vars.yml
    dest: '/tmp/splunk-ansible/vars.yml'

- name: Copy splunk-ansible Inventory
  copy:
    src: splunk_ansible_inventory.ini
    dest: '/tmp/splunk-ansible/inventory.ini'

- name: Run splunk-ansible
  shell: 'ansible-playbook site.yml -e "@vars.yml" -i inventory.ini'
  args:
    chdir: '/tmp/splunk-ansible'
