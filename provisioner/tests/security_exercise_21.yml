---
- name: Step 1, Step 2
  hosts: control
  gather_facts: false

  tasks:
    - name: Step 1, Step 2
      block:
        - name: copy web_attack_simulation.yml to control nodes
          copy:
            src: ../../exercises/ansible_security/1.2-checkpoint/playbooks/web_attack_simulation.yml
            dest: web_attack_simulation.yml

        - name: execute web_attack_simulation.yml  on control nodes
          command: /usr/bin/ansible-playbook web_attack_simulation.yml

        - name: Verify attack string not in log file
          command: "ssh ec2-user@{{ hostvars['snort']['ansible_host'] }} sudo grep web_attack /var/log/httpd/access_log"
          register: grep_result
          failed_when: grep_result.rc == 0

        - name: copy whitelist_attacker.yml to control nodes
          copy:
            src: ../../exercises/ansible_security/1.2-checkpoint/playbooks/whitelist_attacker.yml
            dest: whitelist_attacker.yml

        - name: execute whitelist_attacker.yml on control nodes
          command: /usr/bin/ansible-playbook whitelist_attacker.yml

        - name: install required collections
          command: "ansible-galaxy collection install {{ item }}"
          loop:
            - ibm.qradar

        - name: install required roles
          command: "ansible-galaxy install {{ item }}"
          loop:
            - ansible_security.ids_rule
            - ansible_security.ids_config
            - ansible_security.log_manager

        - name: Give time to apply policy change
          pause:
            minutes: 1

        - name: Verify policy installation
          command: /usr/bin/ansible-playbook --start-at-task="Install policy" whitelist_attacker.yml

        - name: Verify attack string in log file
          command: "ssh ec2-user@{{ hostvars['snort']['ansible_host'] }} sudo grep web_attack /var/log/httpd/access_log"
          retries: 12
          delay: 15
          register: result
          until: result.rc == 0

    - name: Step 4, Step 5 - Create and execute enrich_log playbook
      block:
        - name: Get Check Point MGMT server name, step 1/2 - login, get SID
          uri:
            url: "https://{{ hostvars['checkpoint']['ansible_host'] }}/web_api/login"
            method: POST
            body:
              user: admin
              password: admin123
            body_format: json
            validate_certs: false
          register: login_data
          until: (login_data.status == 200) and (login_data.json is defined)
          retries: 30
          delay: 10

        - name: Get Check Point MGMT server name, step 2/2 - Get server name
          uri:
            url: "https://{{ hostvars['checkpoint']['ansible_host'] }}/web_api/show-gateways-and-servers"
            validate_certs: false
            method: POST
            headers:
              Content-Type: application/json
              X-chkp-sid: "{{ login_data.json.sid }}"
            body_format: json
            body: >
              {}
            return_content: true
          register: mgmt_data

        - name: set server name as fact
          set_fact:
            cp_mngmt_server_name: "{{ mgmt_data.json.objects | selectattr('type', 'equalto', 'CpmiHostCkp')|map(attribute='name')|join(',') }}"

        - name: deploy enrich_log_sources.yml template to control nodes
          template:
            src: ../../exercises/ansible_security/2.1-enrich/playbooks/enrich_log_sources.yml.j2
            dest: enrich_log_sources.yml

        - name: execute enrich_log_sources.yml on control nodes
          command: /usr/bin/ansible-playbook enrich_log_sources.yml
