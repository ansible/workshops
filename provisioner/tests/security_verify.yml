---
- name: Install prerequisites
  hosts: localhost
  connection: local

  tasks:
    - name: Install required collection
      shell: "ansible-galaxy collection install {{item}}"
      loop:
        - 'ibm.qradar'

- name: Check each student environment
  hosts: all
  gather_facts: true

  tasks:
    - name: Control host
      block:
        - name: Check if ansible is installed
          package_facts:

        - name: Fail if ansible is not of a recent enough version
          fail:
            msg: "Ansible is not of a recent enough version on {{ inventory_hostname }}."
          when: ((ansible_facts.packages['ansible'][0]['version'] is not defined) or (ansible_facts.packages['ansible'][0]['version']|string) is version("2.9.0",'<'))

      when: '"ansible" in inventory_hostname'

    - name: Attacker
      block:

        - name: Fail if eth0 is not in 172.16. or eth1 is not in 172.17.
          fail:
            msg: "IP address setup on ethX is not right on {{ inventory_hostname }}."
          when: (((hostvars[inventory_hostname]['ansible_eth0']['ipv4']['address'] | ipaddr('172.16.0.0/16') | string) is not search('172')) or ((hostvars[inventory_hostname]['ansible_eth1']['ipv4']['address'] | ipaddr('172.17.0.0/16') | string) is not search('172')))

        - name: Fail if private_ip is not in 172.16. or private_ip2 is not in 172.17.
          fail:
            msg: "IP address setup on ethX is not right on {{ inventory_hostname }}."
          when: (((hostvars[inventory_hostname]['private_ip'] | ipaddr('172.16.0.0/16') | string) is not search('172')) or ((hostvars[inventory_hostname]['private_ip2'] | ipaddr('172.17.0.0/16') | string) is not search('172')))

      when: '"attack" in inventory_hostname'

    - name: Snort
      block:

        - name: Check if Snort service is running
          service_facts:

        - name: Fail if snort is stopped or broken
          fail:
            msg: "Snort not running on {{ inventory_hostname }}."
          when: ((ansible_facts.services['snort.service']['state'] is not defined) or (ansible_facts.services['snort.service']['state'] != "running"))

        - name: Fail if eth0 is not in 172.16. or eth1 is not in 172.17.
          fail:
            msg: "IP address setup on ethX is not right on {{ inventory_hostname }}."
          when: (((hostvars[inventory_hostname]['ansible_eth0']['ipv4']['address'] | ipaddr('172.16.0.0/16') | string) is not search('172')) or ((hostvars[inventory_hostname]['ansible_eth1']['ipv4']['address'] | ipaddr('172.17.0.0/16') | string) is not search('172')))

        - name: Fail if private_ip is not in 172.16. or private_ip2 is not in 172.17.
          fail:
            msg: "IP address setup on ethX is not right on {{ inventory_hostname }}."
          when: (((hostvars[inventory_hostname]['private_ip'] | ipaddr('172.16.0.0/16') | string) is not search('172')) or ((hostvars[inventory_hostname]['private_ip2'] | ipaddr('172.17.0.0/16') | string) is not search('172')))
      when: '"snort" in inventory_hostname'

    - name: Check Point - Windows part
      block:

        - name: Check if Windows RDP is running
          uri:
            url: "https://{{ hostvars[inventory_hostname]['ansible_host'] }}/myrtille/"
            validate_certs: false
          delegate_to: localhost

        - name: check if SmartConsole was installed properly
          win_reg_stat:
            path: HKLM:\SOFTWARE\WOW6432Node\CheckPoint\SMART_WRAPPER
            name: SmartConsoleInstalled
          register: smart_console_registry

        - name: Fail if Check Point SmartConsole was not installed
          fail:
            msg: "SmartConsole not properly installed on {{ inventory_hostname }}."
          when: ((smart_console_registry['value'] is not defined) or (smart_console_registry['value'] != "Done"))

      when: '"windows" in inventory_hostname'

    - name: Check Point - Check Point API test
      block:

        - name: Check if CheckPoint MGMT API is accessible from global
          uri:
            url: "https://{{ hostvars[inventory_hostname]['ansible_host'] }}/web_api/login"
            method: POST
            body:
              user: "{{ hostvars[inventory_hostname]['ansible_user'] }}"
              password: "{{ hostvars[inventory_hostname]['ansible_password'] }}"
            body_format: json
            validate_certs: false
          register: cp_login_data
          until: (cp_login_data.status == 200) and (cp_login_data.json is defined)
          retries: 5
          delay: 4
          delegate_to: localhost

      when: '"checkpoint" in inventory_hostname'

    - name: Check Point - Test availability and access to NGFW
      block:

        - name: Test NGFW access, step 1/3 - login, get SID
          uri:
            url: "https://{{ hostvars[inventory_hostname|regex_replace('ansible', 'checkpoint')]['ansible_host'] }}/web_api/login"
            method: POST
            body:
              user: admin
              password: admin123
            body_format: json
            validate_certs: false
          register: login_data
          until: (login_data.status == 200) and (login_data.json is defined)
          retries: 5
          delay: 4

        - name: Test NGFW access, step 2/3 - Get NGFW data
          uri:
            url: "https://{{ hostvars[inventory_hostname|regex_replace('ansible', 'checkpoint')]['ansible_host'] }}/web_api/show-simple-gateway"
            validate_certs: false
            method: POST
            headers:
              Content-Type: application/json
              X-chkp-sid: "{{ login_data.json.sid }}"
            body_format: json
            body:
              name: myngfw
            return_content: true
          register: show_gateway_data

        - name: Test NGFW access, step 3/3 - HTTP connect to NGFW from control node
          uri:
            url: "https://{{ show_gateway_data['json']['ipv4-address'] }}/"
            validate_certs: false
            method: GET
            return_content: true
          register: gateway_page
          failed_when: gateway_page['content'] is not search("R80")

      when: '"ansible" in inventory_hostname'

    - name: Check Point - Validate eth1 on GW
      block:

        - name: Validate eth1, step 1/3 - login, get SID
          uri:
            url: "https://{{ hostvars[inventory_hostname|regex_replace('ansible', 'checkpoint')]['ansible_host'] }}/web_api/login"
            method: POST
            body:
              user: admin
              password: admin123
            body_format: json
            validate_certs: false
          register: login_data
          until: (login_data.status == 200) and (login_data.json is defined)
          retries: 5
          delay: 4

        - name: Validate eth1, step 2/3 - Launch script
          uri:
            url: "https://{{ hostvars[inventory_hostname|regex_replace('ansible', 'checkpoint')]['ansible_host'] }}/web_api/run-script"
            validate_certs: false
            method: POST
            headers:
              Content-Type: application/json
              X-chkp-sid: "{{ login_data.json.sid }}"
            body_format: json
            body:
              script-name: "list devices"
              script: "ifconfig eth1|grep inet"
              targets:
                - myngfw
            return_content: true
          register: show_script_data

        - name: Validate eth1, step 3/3 - Verify script return values
          uri:
            url: "https://{{ hostvars[inventory_hostname|regex_replace('ansible', 'checkpoint')]['ansible_host'] }}/web_api/show-task"
            validate_certs: false
            method: POST
            headers:
              Content-Type: application/json
              X-chkp-sid: "{{ login_data.json.sid }}"
            body_format: json
            body:
              task-id: "{{ show_script_data['json']['tasks'][0]['task-id'] }}"
              details-level: full
            return_content: true
          register: task_content
          failed_when: (task_content['json']['tasks'][0]['task-details'][0]['responseMessage']|b64decode) is not search("172.17.")

      when: '"ansible" in inventory_hostname'

    - name: QRadar
      block:

        - name: Check if QRadar API is available
          uri:
            url: "https://{{ hostvars[inventory_hostname]['ansible_host'] }}/api/help/endpoints/1"
            method: GET
            user: "{{ hostvars[inventory_hostname]['ansible_user'] }}"
            password: "{{ hostvars[inventory_hostname]['ansible_httpapi_pass'] }}"
            force_basic_auth: true
            headers:
              Accept: application/json
              Version: "9.1"
            validate_certs: false
          delegate_to: localhost

      when: '"qradar" in inventory_hostname'
