---
- name: Template inventory file for Ansible Controller Install
  ansible.builtin.template:
    src: "controller_install.j2"
    dest: "{{ aap_dir }}/inventory"
  when: create_cluster is not defined or not create_cluster|bool

- name: Template inventory file for Automation Controller Install cluster
  ansible.builtin.template:
    src: tower_cluster_install.j2
    dest: "{{ aap_dir }}/inventory"
  when: create_cluster is defined and create_cluster|bool

- name: Copy manifest.zip to {{ app_dir }}
  ansible.builtin.copy:
    src: "{{ playbook_dir }}/manifest.zip"
    dest: "{{ aap_dir }}"
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: '0644'

- name: Create {{ aap_dir }}/config directory for postinstall
  ansible.builtin.file:
    path: "{{ aap_dir }}/config"
    state: directory
    mode: '0755'

- name: Copy users.yml to {{ aap_dir }}/config
  ansible.builtin.copy:
    src: "users.yml"
    dest: "{{ aap_dir }}/config"
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: '0644'

- name: run the Automation Controller installer
  become: true
  become_user: ec2-user
  environment:
    ANSIBLE_COLLECTIONS_PATH: "{{ aap_dir }}/collections"
  shell: "{{ controller_install_command }}"
  args:
    chdir: "{{ aap_dir }}"
  # timeout: 2400
  async: 3000
  poll: 15

- name: wait for Automation Controller to be up
  ansible.builtin.uri:
    url: https://localhost:{{ aap_port | default('443') }}/api/controller/v2/ping/
    method: GET
    user: admin
    password: "{{ admin_password }}"
    validate_certs: false
  register: check2
  until: check2.json is defined and check2.json.instances[0].capacity > 0 and check2.json.instance_groups[0].capacity > 0
  retries: 60
  delay: 10

- name: Display /api/v2/ping results
  debug:
    msg: '{{ check2.json }}'

## Execution environments
- name: Create container registry credential
  ansible.controller.credential:
    name: '{{ ee_registry_name }} credential'
    organization: Default
    credential_type: Container Registry
    controller_host: "https://localhost:{{ aap_port | default('443') }}"
    controller_username: admin
    controller_password: "{{ admin_password }}"
    validate_certs: false
    inputs:
      username: "{{ redhat_username }}"
      password: "{{ redhat_password }}"
      host: "{{ ee_registry_name }}"

- name: Update default EE to use credential
  ansible.controller.execution_environment:
    name: "Default execution environment"
    image: "{{ ee_default_image }}"
    pull: missing
    credential: "registry.redhat.io credential"
    controller_username: admin
    controller_password: "{{ admin_password }}"
    controller_host: "https://localhost:{{ aap_port | default('443') }}"
    validate_certs: false
  register: ee_check
  until: ee_check is not failed
  retries: 4
  delay: 5

### end of execution environments
