---
- name: SSL cert block
  block:
    - name: controller start
      include_tasks: "service/controller_start.yml"

    - &tower-pinger-block
      block:
        - name: check Tower status
          shell: "curl --user 'admin:{{ admin_password }}' -vkL -XGET https://localhost/api/v2/ping/"
          register: check2
        - name: Display /api/v2/ping results (stdout)
          debug:
            msg: '{{ check2.stdout }}'
        - name: Display /api/v2/ping results (stderr)
          debug:
            msg: '{{ check2.stderr }}'

    - name: change ansible tower base URL
      block:
        - &tower-baseurl-task
          awx.awx.tower_settings:
            name: TOWER_URL_BASE
            value: "https://{{ dns_name }}"
            tower_verify_ssl: false
            tower_host: https://localhost/
            tower_username: admin
            tower_password: "{{ admin_password }}"
          register: change_base_url
          until: change_base_url is not failed
          # controller may not be fully up yet, wait for it gratuitously
          retries: 12
          delay: 5
      rescue:
        - name: controller restart
          include_tasks: "service/controller_restart.yml"

        - *tower-pinger-block

        - <<: *tower-baseurl-task
          name: Run failed task again

    - name: controller stop
      include_tasks: "service/controller_stop.yml"

    - name: create letsencrypt subdirectories
      file:
        path: "{{ item }}"
        state: directory
        owner: root
        group: root
        mode: 0750
      with_items:
        - /etc/letsencrypt
        - /var/lib/letsencrypt

    # If this fails check out status of certbot: https://letsencrypt.status.io/
    - name: try to issue SSL certificate
      block:
        - name: Issue SSL cert
          shell: >
            podman run -it --rm --name certbot \
                -v "/etc/letsencrypt:/etc/letsencrypt:z" \
                -v "/var/lib/letsencrypt:/var/lib/letsencrypt:z" \
                -p 80:80 \
                -p 443:443 \
                docker.io/certbot/certbot:latest certonly \
                --key-type rsa \
                --rsa-key-size 4096 \
                --no-bootstrap \
                --standalone \
                -d {{ dns_name }} \
                --email ansible-network@redhat.com \
                --noninteractive \
                --agree-tos
          register: issue_controller_cert
          until: issue_controller_cert is not failed
          retries: 5
      rescue:
        - name: error with SSL cert
          debug:
            msg: "Unable to retrieve SSL cert, ERROR, continuing on without cert..."

        - name: append dns_information failure
          set_fact:
            dns_information:
              - "{{ dns_information }}"
              - "The Lets Encrypt certbot failed for the controller node, please check https://letsencrypt.status.io/ to make sure the service is running"
    - name: download LetsEncrypt R3 cert
      get_url:
        url: https://letsencrypt.org/certs/lets-encrypt-r3.pem
        dest: "/etc/letsencrypt/live/{{ dns_name }}"
        mode: 0644
        checksum: sha256:177e1b8fc43b722b393f4200ff4d92e32deeffbb76fef5ee68d8f49c88cf9d32
        group: root
        owner: root
    - name: download LetsEncrypt root X1 cert
      get_url:
        url: https://letsencrypt.org/certs/isrgrootx1.pem
        dest: "/etc/letsencrypt/live/{{ dns_name }}"
        mode: 0644
        checksum: sha256:22b557a27055b33606b6559f37703928d3e4ad79f110b407d04986e1843543d1
        group: root
        owner: root
    - name: retrieve LetsEncrypt R3 cert
      slurp:
        src: "/etc/letsencrypt/live/{{ dns_name }}/lets-encrypt-r3.pem"
      register: intermediate_cert
    - name: retrieve LetsEncrypt root X1 cert
      slurp:
        src: "/etc/letsencrypt/live/{{ dns_name }}/isrgrootx1.pem"
      register: root_cert
    - name: combine R3 and root X1 certs to create LetsEncrypt CA bundle
      template:
        src: cert_bundle.j2
        dest: "/etc/letsencrypt/live/{{ dns_name }}/letsencrypt-ca-bundle.pem"
        group: root
        owner: root
    - name: Symlink LetsEncrypt CA bundle to /etc/tower/tower.cert
      ansible.builtin.file:
        src: "/etc/letsencrypt/live/{{ dns_name }}/fullchain.pem"
        dest: /etc/tower/tower.cert
        owner: root
        group: awx
        remote_src: true
    - name: Symlink LetsEncrypt generated private key to /etc/tower/tower.key
      ansible.builtin.file:
        src: "/etc/letsencrypt/live/{{ dns_name }}/privkey.pem"
        dest: /etc/tower/tower.key
        owner: root
        group: awx
        remote_src: true
  rescue:
    - name: no SSL cert for Automation Controller
      debug:
        msg: "SSL cert problem - no cert applied"
  always:
    # Turn on Ansible Controller if successful
    - name: controller restart
      include_tasks: "service/controller_start.yml"
...
