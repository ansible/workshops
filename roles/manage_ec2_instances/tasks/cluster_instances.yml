---
- name: Create EC2 instances for ansible node (control node)
  amazon.aws.ec2_instance:
    key_name: "{{ ec2_name_prefix }}-key"
    security_group: "{{ ec2_security_group }}"
    instance_type: "{{ ec2_info[control_type].size }}"
    image_id: "{{ ansible_control_node_ami.image_id }}"
    region: "{{ ec2_region }}"
    exact_count: "{{ student_total }}"
    state: running
    filters:
      "tag:Workshop_ansible": "{{ ec2_name_prefix }}-ansible-{{ sequence }}"
      instance-state-name: running
    tags:
      Workshop_ansible: "{{ ec2_name_prefix }}-ansible-{{ sequence }}"
      Workshop: "{{ ec2_name_prefix }}"
      Workshop_type: "{{ workshop_type }}"
      AWS_USERNAME: "{{ aws_user }}"
      owner: "{{ aws_user }}"
      Info: "AWS_USERNAME that provisioned this-> {{ aws_user }}"
      Ansible_Workshops: "This was provisioned through the ansible workshops provisioner"
      Students: "{{ student_total }}"
      username: "{{ ec2_info[control_type].username }}"
      short_name: "ansible-{{ sequence }}"
      ansible-workshops: "true"
    wait: "{{ ec2_wait }}"
    network:
      assign_public_ip: true
    vpc_subnet_id: "{{ ec2_vpc_subnet_id }}"
    volumes:
      - device_name: /dev/sda1
        ebs:
          volume_type: "{{ ec2_info[control_type].disk_volume_type }}"
          volume_size: "{{ ec2_info[control_type].disk_space }}"
          iops: "{{ ec2_info[control_type].disk_iops }}"
          throughput: "{{ ec2_info[control_type].disk_throughput }}"
          delete_on_termination: true
  register: control_output

- name: grab instance ids to tag them all
  amazon.aws.ec2_instance_info:
    region: "{{ ec2_region }}"
    filters:
      instance-state-name: running
      "tag:Workshop_ansible": "{{ ec2_name_prefix }}-ansible-{{ sequence }}"
  register: control_output

- name: Ensure tags are present
  amazon.aws.ec2_tag:
    region: "{{ ec2_region }}"
    resource: "{{ item.1.instance_id }}"
    state: present
    tags:
      Name: "{{ ec2_name_prefix }}-student{{ item.0 + 1 }}-ansible-{{ sequence }}"
      Index: "{{ item[0] }}"
      Student: "student{{ item.0 + 1 }}"
      dns: "{% if dns_type != 'none' %}student{{ item.0 + 1 }}.{{ ec2_name_prefix|lower }}.{{ workshop_dns_zone }} {% else %} none {% endif %}"
      launch_time: "{{ item.1.launch_time }}"
  with_indexed_items:
    - "{{ control_output.instances }}"
  when: control_output.instances|length > 0

- name: Grant AWS API access via IAM roles & policy block
  block:
    - name: GRAB ROUTE53 ZONE ID
      route53_zone:
        zone: "{{ workshop_dns_zone }}"
      register: AWSINFO

    - name: Create VPC Lock Down role
      community.aws.iam_role:
        name: "VPCLockDown_{{ ec2_name_prefix }}_student{{ item }}"
        assume_role_policy_document: "{{ lookup('file','AssumeRole_policy.json') }}"
        create_instance_profile: true
        description: VPC Lockdown role for "{{ ec2_name_prefix }}" workshop
      loop: "{{ range(1, student_total + 1)|list }}"

    - name: Create control node instance role
      community.aws.iam_role:
        name: "ControlNode_{{ ec2_name_prefix }}_student{{ item }}"
        assume_role_policy_document: "{{ lookup('file','AssumeRole_policy.json') }}"
        create_instance_profile: true
        description: Control node instance role for "{{ ec2_name_prefix }}" workshop
      loop: "{{ range(1, student_total + 1)|list }}"

    - name: Generate IAM policy for control node IAM instance role
      community.aws.iam_policy:
        iam_type: role
        iam_name: "ControlNode_{{ ec2_name_prefix }}_student{{ item }}"
        policy_name: "IAMPolicy_{{ ec2_name_prefix }}_student{{ item }}"
        state: present
        policy_json: "{{ lookup( 'template', 'iam_vpc_lockdown_policy.json.j2') }}"
      loop: "{{ range(1, student_total + 1)|list }}"
      loop_control:
        index_var: loop_idx

    - name: Associate IAM instance profile with control node
      amazon.aws.ec2_instance:
        instance_ids: "{{ item.1.instance_id }}"
        region: "{{ ec2_region }}"
        instance_role: "ControlNode_{{ ec2_name_prefix }}_student{{ item.0 + 1 }}"
        state: running
        wait: true
      with_indexed_items:
        - "{{ control_output.instances }}"
      register: associate_iam_instance_profile
      until: associate_iam_instance_profile is not failed
      retries: 12
      delay: 10
      when: control_output.instances|length > 0

    - name: Check associate_iam_instance_profile
      debug:
        msg: "{{ associate_iam_instance_profile }}"
      when: control_output.instances|length > 0

  when: tower_node_aws_api_access|default(false)|bool
