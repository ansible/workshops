---
- name: set router types to network_type
  set_fact:
    rtr1_type: "{{ network_type }}"
    rtr2_type: "{{ network_type }}"
    rtr3_type: "{{ network_type }}"
    rtr4_type: "{{ network_type }}"
  when: network_type != "multivendor"

############## Router 1 ##############
- name: Create EC2 instances for rtr1 node (workshop_type network)
  amazon.aws.ec2_instance:
    key_name: "{{ ec2_name_prefix }}-key"
    security_group: "{{ ec2_security_group }}"
    instance_type: "{{ ec2_info[rtr1_type].size }}"
    image_id: "{{ lookup('vars', rtr1_type ~ '_ami')['image_id'] }}"
    region: "{{ ec2_region }}"
    exact_count: "{{ student_total }}"
    user_data: ''
    state: running
    network:
      assign_public_ip: true
    filters:
      instance-state-name: running
      "tag:Workshop_rtr1": "{{ ec2_name_prefix }}-rtr1"
    tags:
      Workshop_rtr1: "{{ ec2_name_prefix }}-rtr1"
      Workshop: "{{ ec2_name_prefix }}"
      uuid: "{{ ec2_name_prefix }}"
      guid: "{{ ec2_name_prefix }}"
      Workshop_type: "{{ workshop_type }}"
      AWS_USERNAME: "{{ aws_user }}"
      owner: "{{ aws_user }}"
      Info: "AWS_USERNAME that provisioned this-> {{ aws_user }}"
      Linklight: "This was provisioned through the linklight provisioner"
      Students: "{{ student_total }}"
      short_name: "rtr1"
      ansible_network_os: "{{ ec2_info[rtr1_type].os }}"
      username: "{{ ec2_info[rtr1_type].username }}"
      security_group: core
      ansible-workshops: "true"
    wait: "{{ ec2_wait }}"
    vpc_subnet_id: "{{ ec2_vpc_subnet_id }}"
    volumes: "{{ec2_info[rtr1_type].volume | default(omit)}}"

- name: grab instance ids to tag rtr1
  amazon.aws.ec2_instance_info:
    region: "{{ ec2_region }}"
    filters:
      instance-state-name: running
      "tag:Workshop_rtr1": "{{ ec2_name_prefix }}-rtr1"
  register: rtr1_output

- name: Ensure tags are present for rtr1 node (workshop_type network)
  amazon.aws.ec2_tag:
    region: "{{ ec2_region }}"
    resource: "{{ item.1.instance_id }}"
    state: present
    tags:
      Name: "{{ ec2_name_prefix }}-student{{item.0 + 1}}-rtr1"
      Index: "{{ item[0] }}"
      Student: "student{{ item.0 + 1 }}"
      launch_time: "{{ item.1.launch_time }}"
  with_indexed_items:
    - "{{ rtr1_output.instances }}"
  when: rtr1_output.instances|length > 0

############## Router 2 ##############
- name: Create EC2 instances for rtr2 node in VPC-2 (workshop_type network)
  amazon.aws.ec2_instance:
    key_name: "{{ ec2_name_prefix }}-key"
    security_group: "{{ ec2_security_group2 }}"
    instance_type: "{{ ec2_info[rtr2_type].size }}"
    image_id: "{{ lookup('vars', rtr2_type ~ '_ami')['image_id'] }}"
    region: "{{ ec2_region }}"
    exact_count: "{{ student_total }}"
    state: running
    user_data: ''
    network:
      assign_public_ip: true
    filters:
      instance-state-name: running
      "tag:Workshop_rtr2": "{{ ec2_name_prefix }}-rtr2"
    tags:
      Workshop_rtr2: "{{ ec2_name_prefix }}-rtr2"
      Workshop: "{{ ec2_name_prefix }}"
      uuid: "{{ ec2_name_prefix }}"
      guid: "{{ ec2_name_prefix }}"
      Workshop_type: "{{ workshop_type }}"
      AWS_USERNAME: "{{ aws_user }}"
      owner: "{{ aws_user }}"
      Info: "AWS_USERNAME that provisioned this-> {{ aws_user }}"
      Linklight: "This was provisioned through the linklight provisioner"
      Students: "{{ student_total }}"
      short_name: "rtr2"
      ansible_network_os: "{{ ec2_info[rtr2_type].os }}"
      username: "{{ ec2_info[rtr1_type].username }}"
      security_group: core
      ansible-workshops: "true"
    wait: "{{ ec2_wait }}"
    vpc_subnet_id: "{{ ec2_vpc_subnet_id2 }}"
    volumes: "{{ ec2_info[rtr2_type].volume | default(omit) }}"

- name: grab instance ids to tag rtr2
  amazon.aws.ec2_instance_info:
    region: "{{ ec2_region }}"
    filters:
      instance-state-name: running
      "tag:Workshop_rtr2": "{{ ec2_name_prefix }}-rtr2"
  register: rtr2_output

- name: Ensure tags are present for rtr2 node (workshop_type network)
  amazon.aws.ec2_tag:
    region: "{{ ec2_region }}"
    resource: "{{ item.1.instance_id }}"
    state: present
    tags:
      Name: "{{ ec2_name_prefix }}-student{{ item.0 + 1 }}-rtr2"
      Index: "{{ item[0] }}"
      Student: "student{{ item.0 + 1 }}"
      launch_time: "{{ item.1.launch_time }}"
  with_indexed_items:
    - "{{ rtr2_output.instances }}"
  when: rtr2_output.instances|length > 0

############## Router 3 ##############
- name: Create EC2 instances for rtr3 node (workshop_type network)
  amazon.aws.ec2_instance:
    key_name: "{{ ec2_name_prefix }}-key"
    security_group: "{{ ec2_security_group }}"
    instance_type: "{{ec2_info[rtr3_type].size }}"
    image_id: "{{ lookup('vars', rtr3_type ~ '_ami')['image_id'] }}"
    region: "{{ ec2_region }}"
    exact_count: "{{ student_total }}"
    user_data: ''
    state: running
    network:
      assign_public_ip: true
    filters:
      instance-state-name: running
      "tag:Workshop_rtr3": "{{ ec2_name_prefix }}-rtr3"
    tags:
      Workshop_rtr3: "{{ ec2_name_prefix }}-rtr3"
      Workshop: "{{ ec2_name_prefix }}"
      uuid: "{{ ec2_name_prefix }}"
      guid: "{{ ec2_name_prefix }}"
      Workshop_type: "{{ workshop_type }}"
      AWS_USERNAME: "{{ aws_user }}"
      owner: "{{ aws_user }}"
      Info: "AWS_USERNAME that provisioned this-> {{ aws_user }}"
      Linklight: "This was provisioned through the linklight provisioner"
      Students: "{{ student_total }}"
      short_name: "rtr3"
      ansible_network_os: "{{ ec2_info[rtr3_type].os }}"
      username: "{{ ec2_info[rtr3_type].username }}"
      security_group: access
      ansible-workshops: "true"
    wait: "{{ ec2_wait }}"
    vpc_subnet_id: "{{ ec2_vpc_subnet_id }}"
    volumes: "{{ ec2_info[rtr3_type].volume | default(omit) }}"

- name: grab instance ids to tag rtr3
  amazon.aws.ec2_instance_info:
    region: "{{ ec2_region }}"
    filters:
      instance-state-name: running
      "tag:Workshop_rtr3": "{{ ec2_name_prefix }}-rtr3"
  register: rtr3_output

- name: Ensure tags are present for rtr3 node (workshop_type network)
  amazon.aws.ec2_tag:
    region: "{{ ec2_region }}"
    resource: "{{ item.1.instance_id }}"
    state: present
    tags:
      Name: "{{ ec2_name_prefix }}-student{{ item.0 + 1 }}-rtr3"
      Index: "{{ item[0] }}"
      Student: "student{{ item.0 + 1 }}"
      launch_time: "{{ item.1.launch_time }}"
  with_indexed_items:
    - "{{ rtr3_output.instances }}"
  when: rtr3_output.instances|length > 0

############## Router 4 ##############
- name: Create EC2 instances for rtr4 node in VPC-2 (workshop_type network)
  amazon.aws.ec2_instance:
    key_name: "{{ ec2_name_prefix }}-key"
    security_group: "{{ ec2_security_group2 }}"
    instance_type: "{{ ec2_info[rtr4_type].size }}"
    image_id: "{{ lookup('vars', rtr4_type ~ '_ami')['image_id'] }}"
    region: "{{ ec2_region }}"
    exact_count: "{{ student_total }}"
    user_data: ''
    state: running
    network:
      assign_public_ip: true
    filters:
      instance-state-name: running
      "tag:Workshop_rtr4": "{{ ec2_name_prefix }}-rtr4"
    tags:
      Workshop_rtr4: "{{ ec2_name_prefix }}-rtr4"
      Workshop: "{{ ec2_name_prefix }}"
      uuid: "{{ ec2_name_prefix }}"
      guid: "{{ ec2_name_prefix }}"
      Workshop_type: "{{ workshop_type }}"
      AWS_USERNAME: "{{ aws_user }}"
      owner: "{{ aws_user }}"
      Info: "AWS_USERNAME that provisioned this-> {{ aws_user }}"
      Linklight: "This was provisioned through the linklight provisioner"
      Students: "{{ student_total }}"
      short_name: "rtr4"
      ansible_network_os: "{{ ec2_info[rtr4_type].os }}"
      username: "{{ ec2_info[rtr1_type].username }}"
      security_group: access
      ansible-workshops: "true"
    wait: "{{ ec2_wait }}"
    vpc_subnet_id: "{{ ec2_vpc_subnet_id2 }}"
    volumes: "{{ ec2_info[rtr4_type].volume | default(omit) }}"

- name: grab instance ids to tag rtr4
  amazon.aws.ec2_instance_info:
    region: "{{ ec2_region }}"
    filters:
      instance-state-name: running
      "tag:Workshop_rtr4": "{{ ec2_name_prefix }}-rtr4"
  register: rtr4_output

- name: Ensure tags are present for rtr4 node (workshop_type network)
  amazon.aws.ec2_tag:
    region: "{{ ec2_region }}"
    resource: "{{ item.1.instance_id }}"
    state: present
    tags:
      Name: "{{ ec2_name_prefix }}-student{{ item.0 + 1 }}-rtr4"
      Index: "{{ item[0] }}"
      Student: "student{{ item.0 + 1 }}"
      launch_time: "{{ item.1.launch_time }}"
  with_indexed_items:
    - "{{ rtr4_output.instances }}"
  when: rtr4_output.instances|length > 0

- name: grab all network interfaces for VPC 1 (workshop_type network)
  amazon.aws.ec2_eni_info:
    region: "{{ ec2_region }}"
    filters:
      vpc-id: "{{ ec2_vpc_id }}"
  register: eni_facts_1

- name: grab all network interfaces for VPC 2 (workshop_type network)
  amazon.aws.ec2_eni_info:
    region: "{{ ec2_region }}"
    filters:
      vpc-id: "{{ ec2_vpc_id2 }}"
  register: eni_facts_2

- name: Disable Source/Dest check on instance {{ec2_vpc_id1}} (workshop_type network)
  amazon.aws.ec2_eni:
    eni_id: "{{ item['network_interface_id'] }}"
    region: "{{ ec2_region }}"
    source_dest_check: false
  with_items:
    - "{{ eni_facts_1['network_interfaces'] }}"
    - "{{ eni_facts_2['network_interfaces'] }}"
