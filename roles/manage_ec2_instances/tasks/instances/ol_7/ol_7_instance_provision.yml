---
- name: Create EC2 instances for node4
  amazon.aws.ec2_instance:
    network:
      assign_public_ip: true
    key_name: "{{ ec2_name_prefix }}-key"
    security_group: "{{ ec2_security_group }}"
    instance_type: "{{ ec2_info[ol7].size[list_count|int] }}"
    image_id: "{{ node_ami_ol7.image_id }}"
    region: "{{ ec2_region }}"
    exact_count: "{{ student_total|int }}"
    state: running
    filters:
      instance-state-name: running
      "tag:Workshop_node4": "{{ ec2_name_prefix }}-node4"
    tags:
      Workshop_node4: "{{ ec2_name_prefix }}-node4"
      Workshop: "{{ ec2_name_prefix }}"
      uuid: "{{ ec2_name_prefix }}"
      guid: "{{ ec2_name_prefix }}"
      Workshop_type: "{{ workshop_type }}"
      AWS_USERNAME: "{{ aws_user }}"
      owner: "{{ aws_user }}"
      Info: "AWS_USERNAME that provisioned this-> {{ aws_user }}"
      Linklight: "This was provisioned through the linklight provisioner"
      Students: "{{ student_total|int }}"
      short_name: "node4"
      username: "{{ ec2_info[ol7].username }}"
      ansible-workshops: "true"
    wait: "{{ ec2_wait }}"
    vpc_subnet_id: "{{ ec2_vpc_subnet_id }}"
    volumes:
      - device_name: /dev/sda1
        ebs:
          volume_type: "{{ ec2_info[ol7].disk_volume_type }}"
          volume_size: "{{ ec2_info[ol7].disk_space }}"
          iops: "{{ ec2_info[ol7].disk_iops }}"
          throughput: "{{ ec2_info[ol7].disk_throughput }}"
          delete_on_termination: true

- name: grab instance ids to tag node4
  amazon.aws.ec2_instance_info:
    region: "{{ ec2_region }}"
    filters:
      instance-state-name: running
      "tag:Workshop_node4": "{{ ec2_name_prefix }}-node4"
  register: node4_output

- name: Ensure tags are present for node4
  amazon.aws.ec2_tag:
    region: "{{ ec2_region }}"
    resource: "{{ item.1.instance_id }}"
    state: present
    tags:
      Name: "{{ ec2_name_prefix }}-student{{ item.0 + 1 }}-node4"
      Index: "{{ item[0] }}"
      Student: "student{{ item.0 + 1 }}"
      launch_time: "{{ item.1.launch_time }}"
  with_indexed_items:
    - "{{ node4_output.instances }}"
  when: node4_output.instances|length > 0

- name: Associate IAM instance profile with node4
  amazon.aws.ec2_instance:
    instance_ids: "{{ item.1.instance_id }}"
    region: "{{ ec2_region }}"
    instance_role: "VPCLockDown_{{ ec2_name_prefix }}_student{{ item.0 + 1 }}"
    state: running
    wait: true
  with_indexed_items:
    - "{{ node4_output.instances }}"
  register: associate_iam_instance_profile
  until: associate_iam_instance_profile is not failed
  retries: 12
  delay: 10
  when:
    - node4_output.instances|length > 0
    - tower_node_aws_api_access|default(false)|bool

- name: Create EC2 instances for node5
  amazon.aws.ec2_instance:
    network:
      assign_public_ip: true
    key_name: "{{ ec2_name_prefix }}-key"
    security_group: "{{ ec2_security_group }}"
    instance_type: "{{ ec2_info[ol7].size[list_count|int] }}"
    image_id: "{{ node_ami_ol7.image_id }}"
    region: "{{ ec2_region }}"
    exact_count: "{{ student_total|int }}"
    state: running
    filters:
      instance-state-name: running
      "tag:Workshop_node5": "{{ ec2_name_prefix }}-node5"
    tags:
      Workshop_node5: "{{ ec2_name_prefix }}-node5"
      Workshop: "{{ ec2_name_prefix }}"
      uuid: "{{ ec2_name_prefix }}"
      guid: "{{ ec2_name_prefix }}"
      Workshop_type: "{{ workshop_type }}"
      AWS_USERNAME: "{{ aws_user }}"
      owner: "{{ aws_user }}"
      Info: "AWS_USERNAME that provisioned this-> {{ aws_user }}"
      Linklight: "This was provisioned through the linklight provisioner"
      Students: "{{ student_total|int }}"
      short_name: "node5"
      username: "{{ ec2_info[ol7].username }}"
      ansible-workshops: "true"
    wait: "{{ ec2_wait }}"
    vpc_subnet_id: "{{ ec2_vpc_subnet_id }}"
    volumes:
      - device_name: /dev/sda1
        ebs:
          volume_type: "{{ ec2_info[ol7].disk_volume_type }}"
          volume_size: "{{ ec2_info[ol7].disk_space }}"
          iops: "{{ ec2_info[ol7].disk_iops }}"
          throughput: "{{ ec2_info[ol7].disk_throughput }}"
          delete_on_termination: true

- name: grab instance ids to tag them all
  amazon.aws.ec2_instance_info:
    region: "{{ ec2_region }}"
    filters:
      instance-state-name: running
      "tag:Workshop_node5": "{{ ec2_name_prefix }}-node5"
  register: node5_output

- name: Ensure tags are present for node5
  amazon.aws.ec2_tag:
    region: "{{ ec2_region }}"
    resource: "{{ item.1.instance_id }}"
    state: present
    tags:
      Name: "{{ ec2_name_prefix }}-student{{ item.0 + 1 }}-node5"
      Index: "{{ item[0] }}"
      Student: "student{{ item.0 + 1 }}"
      launch_time: "{{ item.1.launch_time }}"
  with_indexed_items:
    - "{{ node5_output.instances }}"
  when: node5_output.instances|length > 0

- name: Associate IAM instance profile with node5
  amazon.aws.ec2_instance:
    instance_ids: "{{ item.1.instance_id }}"
    region: "{{ ec2_region }}"
    instance_role: "VPCLockDown_{{ ec2_name_prefix }}_student{{ item.0 + 1 }}"
    state: running
    wait: true
  with_indexed_items:
    - "{{ node5_output.instances }}"
  register: associate_iam_instance_profile
  until: associate_iam_instance_profile is not failed
  retries: 12
  delay: 10
  when:
    - node5_output.instances|length > 0
    - tower_node_aws_api_access|default(false)|bool

- name: Create EC2 instances for node6
  amazon.aws.ec2_instance:
    network:
      assign_public_ip: true
    key_name: "{{ ec2_name_prefix }}-key"
    security_group: "{{ ec2_security_group }}"
    instance_type: "{{ ec2_info[ol7].size[list_count|int] }}"
    image_id: "{{ node_ami_ol7.image_id }}"
    region: "{{ ec2_region }}"
    exact_count: "{{ student_total|int }}"
    state: running
    filters:
      instance-state-name: running
      "tag:Workshop_node6": "{{ ec2_name_prefix }}-node6"
    tags:
      Workshop_node6: "{{ ec2_name_prefix }}-node6"
      Workshop: "{{ ec2_name_prefix }}"
      uuid: "{{ ec2_name_prefix }}"
      guid: "{{ ec2_name_prefix }}"
      Workshop_type: "{{ workshop_type }}"
      AWS_USERNAME: "{{ aws_user }}"
      owner: "{{ aws_user }}"
      Info: "AWS_USERNAME that provisioned this-> {{ aws_user }}"
      Linklight: "This was provisioned through the linklight provisioner"
      Students: "{{ student_total|int }}"
      short_name: "node6"
      username: "{{ ec2_info[ol7].username }}"
      ansible-workshops: "true"
    wait: "{{ ec2_wait }}"
    vpc_subnet_id: "{{ ec2_vpc_subnet_id }}"
    volumes:
      - device_name: /dev/sda1
        ebs:
          volume_type: "{{ ec2_info[ol7].disk_volume_type }}"
          volume_size: "{{ ec2_info[ol7].disk_space }}"
          iops: "{{ ec2_info[ol7].disk_iops }}"
          throughput: "{{ ec2_info[ol7].disk_throughput }}"
          delete_on_termination: true

- name: grab instance ids to tag node6
  amazon.aws.ec2_instance_info:
    region: "{{ ec2_region }}"
    filters:
      instance-state-name: running
      "tag:Workshop_node6": "{{ ec2_name_prefix }}-node6"
  register: node6_output

- name: Ensure tags are present for node6
  amazon.aws.ec2_tag:
    region: "{{ ec2_region }}"
    resource: "{{ item.1.instance_id }}"
    state: present
    tags:
      Name: "{{ ec2_name_prefix }}-student{{ item.0 + 1 }}-node6"
      Index: "{{ item[0] }}"
      Student: "student{{ item.0 + 1 }}"
      launch_time: "{{ item.1.launch_time }}"
  with_indexed_items:
    - "{{ node6_output.instances }}"
  when: node6_output.instances|length > 0

- name: Associate IAM instance profile with node6
  amazon.aws.ec2_instance:
    instance_ids: "{{ item.1.instance_id }}"
    region: "{{ ec2_region }}"
    instance_role: "VPCLockDown_{{ ec2_name_prefix }}_student{{ item.0 + 1 }}"
    state: running
    wait: true
  with_indexed_items:
    - "{{ node6_output.instances }}"
  register: associate_iam_instance_profile
  until: associate_iam_instance_profile is not failed
  retries: 12
  delay: 10
  when:
    - node6_output.instances|length > 0
    - tower_node_aws_api_access|default(false)|bool
