---
- name: use COP controller_configuration collection
  when: controller_projects is defined
  include_role:
    name: '{{ setup_controller }}'
  loop:
    - 'infra.controller_configuration.hosts'
    - 'infra.controller_configuration.organizations'
    - 'infra.controller_configuration.users'
    - 'infra.controller_configuration.teams'
    - 'infra.controller_configuration.projects'
    - 'infra.controller_configuration.job_templates'
    - 'infra.controller_configuration.roles'
    - 'infra.controller_configuration.groups'
  loop_control:
    loop_var: setup_controller

- name: Debug the student number via the username var
  ansible.builtin.debug:
    msg:
     - "student: {{ student_number }}"
     - "{{ groups['routers'] }}"

- name: Filter hosts containing student number
  ansible.builtin.set_fact:
    student_hosts: "{{ groups['routers'] | select('search', 'student' ~ student_number ~ '-') | list }}"

- name: Debug hosts for
  ansible.builtin.debug:
    msg: "{{ student_hosts }}"

- name: Add devices into controller inventory
  awx.awx.host:
    name: "{{ hostvars[item].short_name }}"
    enabled: true
    inventory: "Workshop Inventory"
    controller_username: admin
    controller_password: "{{ admin_password }}"
    controller_host: "https://{{ ansible_host }}"
    validate_certs: false
    variables:
      ansible_host: "{{ hostvars[item].ansible_host }}"
      private_ip: "{{ hostvars[item].private_ip }}"
  loop: "{{ student_hosts }}"

- name: Filter hosts where ansible_network_os is set to 'ios'
  ansible.builtin.set_fact:
    # cisco_routers: "{{ hostvars|dictsort|selectattr('0', 'in', student_hosts)|selectattr('1.ansible_network_os', 'eq', 'ios')|map(attribute='0') }}"
    cisco_routers_short_names: "{{ hostvars|dictsort|selectattr('0', 'in', groups.routers)|selectattr('1.ansible_network_os', 'eq', 'ios')|map(attribute='0')|map('extract', hostvars, 'short_name')|list }}"
    arista_routers: "{{ hostvars|dictsort|selectattr('0', 'in', student_hosts)|selectattr('1.ansible_network_os', 'eq', 'eos')|map(attribute='0')|map('extract', hostvars, 'short_name')|list }}"
    juniper_routers: "{{ hostvars|dictsort|selectattr('0', 'in', student_hosts)|selectattr('1.ansible_network_os', 'eq', 'junos')|map(attribute='0')|map('extract', hostvars, 'short_name')|list }}"

# - name: Filter hosts where ansible_network_os is set to 'ios'
#   set_fact:
#     cisco_routers: "{{ cisco_routers | default([]) + [item] }}"
#   loop: "{{ groups['routers'] }}"
#   when: hostvars[item]['ansible_network_os'] == 'ios'

- name: Debug the routers
  debug:
    msg:
      - "cisco_routers_short_names: {{ cisco_routers_short_names }}"
      - "arista_routers: {{ arista_routers }}"
      - "juniper_routers: {{ juniper_routers }}"

- name: Add hosts to group cisco
  awx.awx.group:
    name: cisco
    inventory: "Workshop Inventory"
    hosts: "{{ cisco_routers_short_names }}"
    preserve_existing_hosts: True
    preserve_existing_children: True
    controller_username: admin
    controller_password: "{{ admin_password }}"
    controller_host: "https://{{ ansible_host }}"
    validate_certs: false

- name: Add hosts to juniper
  awx.awx.group:
    name: juniper
    inventory: "Workshop Inventory"
    hosts: "{{ juniper_routers }}"
    preserve_existing_hosts: True
    preserve_existing_children: True
    controller_username: admin
    controller_password: "{{ admin_password }}"
    controller_host: "https://{{ ansible_host }}"
    validate_certs: false

- name: Add hosts to arista
  awx.awx.group:
    name: arista
    inventory: "Workshop Inventory"
    hosts: "{{ arista_routers }}"
    preserve_existing_hosts: True
    preserve_existing_children: True
    controller_username: admin
    controller_password: "{{ admin_password }}"
    controller_host: "https://{{ ansible_host }}"
    validate_certs: false

- name: Add group routers
  awx.awx.group:
    name: routers
    inventory: "Workshop Inventory"
    children:
      - cisco
      - arista
      - juniper
    preserve_existing_hosts: True
    preserve_existing_children: True
    controller_username: admin
    controller_password: "{{ admin_password }}"
    controller_host: "https://{{ ansible_host }}"
    validate_certs: false

- name: Add group network
  awx.awx.group:
    name: network
    inventory: "Workshop Inventory"
    children:
      - routers
    preserve_existing_hosts: True
    preserve_existing_children: True
    variables:
      restore_inventory: "Workshop Inventory"
      restore_credential: "Workshop Credential"
      restore_project: "Workshop Project"
    controller_username: admin
    controller_password: "{{ admin_password }}"
    controller_host: "https://{{ ansible_host }}"
    validate_certs: false
